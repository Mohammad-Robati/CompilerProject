Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI_COLON declistlast block SEMI_COLON
Rule 2     declistlast -> declist
Rule 3     declistlast -> <empty>
Rule 4     declist -> dec
Rule 5     declist -> declist dec
Rule 6     dec -> vardec
Rule 7     dec -> procdec
Rule 8     dec -> funcdec
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> BOOL
Rule 12    iddec -> ID
Rule 13    iddec -> ID ASSIGN exp
Rule 14    idlist -> iddec
Rule 15    idlist -> idlist SEPARATOR iddec
Rule 16    vardec -> type idlist SEMI_COLON
Rule 17    paramdecslast -> paramdecs
Rule 18    paramdecslast -> <empty>
Rule 19    procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
Rule 20    funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
Rule 21    paramdecs -> paramdec
Rule 22    paramdecs -> paramdecs SEMI_COLON paramdec
Rule 23    paramdec -> type paramlist
Rule 24    paramlist -> ID
Rule 25    paramlist -> paramlist SEPARATOR ID
Rule 26    block -> BEGIN stmtlist END
Rule 27    block -> stmt
Rule 28    stmtlist -> stmt
Rule 29    stmtlist -> stmtlist SEMI_COLON stmt
Rule 30    lvalue -> ID
Rule 31    assignstmt -> lvalue ASSIGN exp
Rule 32    stmt -> assignstmt
Rule 33    stmt -> IF controlifexp THEN block
Rule 34    stmt -> IF controlifexp THEN block ELSE controlelse block
Rule 35    controlifexp -> exp
Rule 36    controlelse -> <empty>
Rule 37    stmt -> WHILE controlwhileexp DO block
Rule 38    controlwhileexp -> exp
Rule 39    stmt -> FOR assignstmt TO controlforupexp DO block
Rule 40    stmt -> FOR assignstmt DOWNTO controlfordownexp DO block
Rule 41    controlforupexp -> exp
Rule 42    controlfordownexp -> exp
Rule 43    stmt -> CASE controlcaseexp caseelement END
Rule 44    controlcaseexp -> exp
Rule 45    caseelement -> case COLON caseelementcontrol block SEMI_COLON
Rule 46    caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON
Rule 47    caseelementcontrol -> <empty>
Rule 48    case -> INTEGER
Rule 49    stmt -> RETURN exp
Rule 50    stmt -> exp
Rule 51    exp -> exp SUM exp
Rule 52    exp -> exp SUB exp
Rule 53    exp -> exp MUL exp
Rule 54    exp -> exp DIV exp
Rule 55    exp -> exp AND exp
Rule 56    exp -> exp OR exp
Rule 57    exp -> exp NE exp
Rule 58    exp -> exp EQ exp
Rule 59    exp -> exp LT exp
Rule 60    exp -> exp GT exp
Rule 61    exp -> exp LE exp
Rule 62    exp -> exp GE exp
Rule 63    exp -> OPEN_PAREN exp CLOSE_PAREN
Rule 64    exp -> REALNUMBER
Rule 65    exp -> INTEGER
Rule 66    exp -> TRUE
Rule 67    exp -> FALSE
Rule 68    exp -> lvalue
Rule 69    exp -> ID OPEN_PAREN explist CLOSE_PAREN
Rule 70    explist -> exp
Rule 71    explist -> explist SEPARATOR exp

Terminals, with rules where they appear

AND                  : 55
ASSIGN               : 13 31
BEGIN                : 26
BOOL                 : 11
CASE                 : 43
CLOSE_PAREN          : 19 20 63 69
COLON                : 20 45 46
DIV                  : 54
DO                   : 37 39 40
DOWNTO               : 40
ELSE                 : 34
END                  : 26 43
EQ                   : 58
FALSE                : 67
FOR                  : 39 40
FUNCTION             : 20
GE                   : 62
GT                   : 60
ID                   : 1 12 13 19 20 24 25 30 69
IF                   : 33 34
INT                  : 9
INTEGER              : 48 65
LE                   : 61
LT                   : 59
MUL                  : 53
NE                   : 57
OPEN_PAREN           : 19 20 63 69
OR                   : 56
PROCEDURE            : 19
PROGRAM              : 1
REAL                 : 10
REALNUMBER           : 64
RETURN               : 49
SEMI_COLON           : 1 1 16 19 20 22 29 45 46
SEPARATOR            : 15 25 71
SUB                  : 52
SUM                  : 51
THEN                 : 33 34
TO                   : 39
TRUE                 : 66
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

assignstmt           : 32 39 40
block                : 1 19 20 33 34 34 37 39 40 45 46
case                 : 45 46
caseelement          : 43 46
caseelementcontrol   : 45 46
controlcaseexp       : 43
controlelse          : 34
controlfordownexp    : 40
controlforupexp      : 39
controlifexp         : 33 34
controlwhileexp      : 37
dec                  : 4 5
declist              : 2 5
declistlast          : 1 19 20
exp                  : 13 31 35 38 41 42 44 49 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 70 71
explist              : 69 71
funcdec              : 8
iddec                : 14 15
idlist               : 15 16
lvalue               : 31 68
paramdec             : 21 22
paramdecs            : 17 22
paramdecslast        : 19 20
paramlist            : 23 25
procdec              : 7
program              : 0
stmt                 : 27 28 29
stmtlist             : 26 29
type                 : 16 20 23
vardec               : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI_COLON declistlast block SEMI_COLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI_COLON declistlast block SEMI_COLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI_COLON declistlast block SEMI_COLON

    SEMI_COLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI_COLON . declistlast block SEMI_COLON
    (2) declistlast -> . declist
    (3) declistlast -> .
    (4) declist -> . dec
    (5) declist -> . declist dec
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (16) vardec -> . type idlist SEMI_COLON
    (19) procdec -> . PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
    (20) funcdec -> . FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    BEGIN           reduce using rule 3 (declistlast -> .)
    IF              reduce using rule 3 (declistlast -> .)
    WHILE           reduce using rule 3 (declistlast -> .)
    FOR             reduce using rule 3 (declistlast -> .)
    CASE            reduce using rule 3 (declistlast -> .)
    RETURN          reduce using rule 3 (declistlast -> .)
    OPEN_PAREN      reduce using rule 3 (declistlast -> .)
    REALNUMBER      reduce using rule 3 (declistlast -> .)
    INTEGER         reduce using rule 3 (declistlast -> .)
    TRUE            reduce using rule 3 (declistlast -> .)
    FALSE           reduce using rule 3 (declistlast -> .)
    ID              reduce using rule 3 (declistlast -> .)
    PROCEDURE       shift and go to state 12
    FUNCTION        shift and go to state 13
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    declistlast                    shift and go to state 5
    declist                        shift and go to state 6
    dec                            shift and go to state 7
    vardec                         shift and go to state 8
    procdec                        shift and go to state 9
    funcdec                        shift and go to state 10
    type                           shift and go to state 11

state 5

    (1) program -> PROGRAM ID SEMI_COLON declistlast . block SEMI_COLON
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 18
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 6

    (2) declistlast -> declist .
    (5) declist -> declist . dec
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (16) vardec -> . type idlist SEMI_COLON
    (19) procdec -> . PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
    (20) funcdec -> . FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    BEGIN           reduce using rule 2 (declistlast -> declist .)
    IF              reduce using rule 2 (declistlast -> declist .)
    WHILE           reduce using rule 2 (declistlast -> declist .)
    FOR             reduce using rule 2 (declistlast -> declist .)
    CASE            reduce using rule 2 (declistlast -> declist .)
    RETURN          reduce using rule 2 (declistlast -> declist .)
    OPEN_PAREN      reduce using rule 2 (declistlast -> declist .)
    REALNUMBER      reduce using rule 2 (declistlast -> declist .)
    INTEGER         reduce using rule 2 (declistlast -> declist .)
    TRUE            reduce using rule 2 (declistlast -> declist .)
    FALSE           reduce using rule 2 (declistlast -> declist .)
    ID              reduce using rule 2 (declistlast -> declist .)
    PROCEDURE       shift and go to state 12
    FUNCTION        shift and go to state 13
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    dec                            shift and go to state 34
    vardec                         shift and go to state 8
    procdec                        shift and go to state 9
    funcdec                        shift and go to state 10
    type                           shift and go to state 11

state 7

    (4) declist -> dec .

    PROCEDURE       reduce using rule 4 (declist -> dec .)
    FUNCTION        reduce using rule 4 (declist -> dec .)
    INT             reduce using rule 4 (declist -> dec .)
    REAL            reduce using rule 4 (declist -> dec .)
    BOOL            reduce using rule 4 (declist -> dec .)
    BEGIN           reduce using rule 4 (declist -> dec .)
    IF              reduce using rule 4 (declist -> dec .)
    WHILE           reduce using rule 4 (declist -> dec .)
    FOR             reduce using rule 4 (declist -> dec .)
    CASE            reduce using rule 4 (declist -> dec .)
    RETURN          reduce using rule 4 (declist -> dec .)
    OPEN_PAREN      reduce using rule 4 (declist -> dec .)
    REALNUMBER      reduce using rule 4 (declist -> dec .)
    INTEGER         reduce using rule 4 (declist -> dec .)
    TRUE            reduce using rule 4 (declist -> dec .)
    FALSE           reduce using rule 4 (declist -> dec .)
    ID              reduce using rule 4 (declist -> dec .)


state 8

    (6) dec -> vardec .

    PROCEDURE       reduce using rule 6 (dec -> vardec .)
    FUNCTION        reduce using rule 6 (dec -> vardec .)
    INT             reduce using rule 6 (dec -> vardec .)
    REAL            reduce using rule 6 (dec -> vardec .)
    BOOL            reduce using rule 6 (dec -> vardec .)
    BEGIN           reduce using rule 6 (dec -> vardec .)
    IF              reduce using rule 6 (dec -> vardec .)
    WHILE           reduce using rule 6 (dec -> vardec .)
    FOR             reduce using rule 6 (dec -> vardec .)
    CASE            reduce using rule 6 (dec -> vardec .)
    RETURN          reduce using rule 6 (dec -> vardec .)
    OPEN_PAREN      reduce using rule 6 (dec -> vardec .)
    REALNUMBER      reduce using rule 6 (dec -> vardec .)
    INTEGER         reduce using rule 6 (dec -> vardec .)
    TRUE            reduce using rule 6 (dec -> vardec .)
    FALSE           reduce using rule 6 (dec -> vardec .)
    ID              reduce using rule 6 (dec -> vardec .)


state 9

    (7) dec -> procdec .

    PROCEDURE       reduce using rule 7 (dec -> procdec .)
    FUNCTION        reduce using rule 7 (dec -> procdec .)
    INT             reduce using rule 7 (dec -> procdec .)
    REAL            reduce using rule 7 (dec -> procdec .)
    BOOL            reduce using rule 7 (dec -> procdec .)
    BEGIN           reduce using rule 7 (dec -> procdec .)
    IF              reduce using rule 7 (dec -> procdec .)
    WHILE           reduce using rule 7 (dec -> procdec .)
    FOR             reduce using rule 7 (dec -> procdec .)
    CASE            reduce using rule 7 (dec -> procdec .)
    RETURN          reduce using rule 7 (dec -> procdec .)
    OPEN_PAREN      reduce using rule 7 (dec -> procdec .)
    REALNUMBER      reduce using rule 7 (dec -> procdec .)
    INTEGER         reduce using rule 7 (dec -> procdec .)
    TRUE            reduce using rule 7 (dec -> procdec .)
    FALSE           reduce using rule 7 (dec -> procdec .)
    ID              reduce using rule 7 (dec -> procdec .)


state 10

    (8) dec -> funcdec .

    PROCEDURE       reduce using rule 8 (dec -> funcdec .)
    FUNCTION        reduce using rule 8 (dec -> funcdec .)
    INT             reduce using rule 8 (dec -> funcdec .)
    REAL            reduce using rule 8 (dec -> funcdec .)
    BOOL            reduce using rule 8 (dec -> funcdec .)
    BEGIN           reduce using rule 8 (dec -> funcdec .)
    IF              reduce using rule 8 (dec -> funcdec .)
    WHILE           reduce using rule 8 (dec -> funcdec .)
    FOR             reduce using rule 8 (dec -> funcdec .)
    CASE            reduce using rule 8 (dec -> funcdec .)
    RETURN          reduce using rule 8 (dec -> funcdec .)
    OPEN_PAREN      reduce using rule 8 (dec -> funcdec .)
    REALNUMBER      reduce using rule 8 (dec -> funcdec .)
    INTEGER         reduce using rule 8 (dec -> funcdec .)
    TRUE            reduce using rule 8 (dec -> funcdec .)
    FALSE           reduce using rule 8 (dec -> funcdec .)
    ID              reduce using rule 8 (dec -> funcdec .)


state 11

    (16) vardec -> type . idlist SEMI_COLON
    (14) idlist -> . iddec
    (15) idlist -> . idlist SEPARATOR iddec
    (12) iddec -> . ID
    (13) iddec -> . ID ASSIGN exp

    ID              shift and go to state 37

    idlist                         shift and go to state 35
    iddec                          shift and go to state 36

state 12

    (19) procdec -> PROCEDURE . ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON

    ID              shift and go to state 38


state 13

    (20) funcdec -> FUNCTION . ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON

    ID              shift and go to state 39


state 14

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)
    PROCEDURE       reduce using rule 9 (type -> INT .)
    FUNCTION        reduce using rule 9 (type -> INT .)
    INT             reduce using rule 9 (type -> INT .)
    REAL            reduce using rule 9 (type -> INT .)
    BOOL            reduce using rule 9 (type -> INT .)
    BEGIN           reduce using rule 9 (type -> INT .)
    IF              reduce using rule 9 (type -> INT .)
    WHILE           reduce using rule 9 (type -> INT .)
    FOR             reduce using rule 9 (type -> INT .)
    CASE            reduce using rule 9 (type -> INT .)
    RETURN          reduce using rule 9 (type -> INT .)
    OPEN_PAREN      reduce using rule 9 (type -> INT .)
    REALNUMBER      reduce using rule 9 (type -> INT .)
    INTEGER         reduce using rule 9 (type -> INT .)
    TRUE            reduce using rule 9 (type -> INT .)
    FALSE           reduce using rule 9 (type -> INT .)


state 15

    (10) type -> REAL .

    ID              reduce using rule 10 (type -> REAL .)
    PROCEDURE       reduce using rule 10 (type -> REAL .)
    FUNCTION        reduce using rule 10 (type -> REAL .)
    INT             reduce using rule 10 (type -> REAL .)
    REAL            reduce using rule 10 (type -> REAL .)
    BOOL            reduce using rule 10 (type -> REAL .)
    BEGIN           reduce using rule 10 (type -> REAL .)
    IF              reduce using rule 10 (type -> REAL .)
    WHILE           reduce using rule 10 (type -> REAL .)
    FOR             reduce using rule 10 (type -> REAL .)
    CASE            reduce using rule 10 (type -> REAL .)
    RETURN          reduce using rule 10 (type -> REAL .)
    OPEN_PAREN      reduce using rule 10 (type -> REAL .)
    REALNUMBER      reduce using rule 10 (type -> REAL .)
    INTEGER         reduce using rule 10 (type -> REAL .)
    TRUE            reduce using rule 10 (type -> REAL .)
    FALSE           reduce using rule 10 (type -> REAL .)


state 16

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)
    PROCEDURE       reduce using rule 11 (type -> BOOL .)
    FUNCTION        reduce using rule 11 (type -> BOOL .)
    INT             reduce using rule 11 (type -> BOOL .)
    REAL            reduce using rule 11 (type -> BOOL .)
    BOOL            reduce using rule 11 (type -> BOOL .)
    BEGIN           reduce using rule 11 (type -> BOOL .)
    IF              reduce using rule 11 (type -> BOOL .)
    WHILE           reduce using rule 11 (type -> BOOL .)
    FOR             reduce using rule 11 (type -> BOOL .)
    CASE            reduce using rule 11 (type -> BOOL .)
    RETURN          reduce using rule 11 (type -> BOOL .)
    OPEN_PAREN      reduce using rule 11 (type -> BOOL .)
    REALNUMBER      reduce using rule 11 (type -> BOOL .)
    INTEGER         reduce using rule 11 (type -> BOOL .)
    TRUE            reduce using rule 11 (type -> BOOL .)
    FALSE           reduce using rule 11 (type -> BOOL .)


state 17

    (69) exp -> ID . OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> ID .

    OPEN_PAREN      shift and go to state 40
    ASSIGN          reduce using rule 30 (lvalue -> ID .)
    SUM             reduce using rule 30 (lvalue -> ID .)
    SUB             reduce using rule 30 (lvalue -> ID .)
    MUL             reduce using rule 30 (lvalue -> ID .)
    DIV             reduce using rule 30 (lvalue -> ID .)
    AND             reduce using rule 30 (lvalue -> ID .)
    OR              reduce using rule 30 (lvalue -> ID .)
    NE              reduce using rule 30 (lvalue -> ID .)
    EQ              reduce using rule 30 (lvalue -> ID .)
    LT              reduce using rule 30 (lvalue -> ID .)
    GT              reduce using rule 30 (lvalue -> ID .)
    LE              reduce using rule 30 (lvalue -> ID .)
    GE              reduce using rule 30 (lvalue -> ID .)
    SEMI_COLON      reduce using rule 30 (lvalue -> ID .)
    END             reduce using rule 30 (lvalue -> ID .)
    THEN            reduce using rule 30 (lvalue -> ID .)
    DO              reduce using rule 30 (lvalue -> ID .)
    INTEGER         reduce using rule 30 (lvalue -> ID .)
    ELSE            reduce using rule 30 (lvalue -> ID .)
    CLOSE_PAREN     reduce using rule 30 (lvalue -> ID .)
    SEPARATOR       reduce using rule 30 (lvalue -> ID .)
    TO              reduce using rule 30 (lvalue -> ID .)
    DOWNTO          reduce using rule 30 (lvalue -> ID .)


state 18

    (1) program -> PROGRAM ID SEMI_COLON declistlast block . SEMI_COLON

    SEMI_COLON      shift and go to state 41


state 19

    (26) block -> BEGIN . stmtlist END
    (28) stmtlist -> . stmt
    (29) stmtlist -> . stmtlist SEMI_COLON stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    stmtlist                       shift and go to state 42
    stmt                           shift and go to state 43
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 20

    (27) block -> stmt .

    SEMI_COLON      reduce using rule 27 (block -> stmt .)
    ELSE            reduce using rule 27 (block -> stmt .)
    END             reduce using rule 27 (block -> stmt .)


state 21

    (32) stmt -> assignstmt .

    SEMI_COLON      reduce using rule 32 (stmt -> assignstmt .)
    END             reduce using rule 32 (stmt -> assignstmt .)
    ELSE            reduce using rule 32 (stmt -> assignstmt .)


state 22

    (33) stmt -> IF . controlifexp THEN block
    (34) stmt -> IF . controlifexp THEN block ELSE controlelse block
    (35) controlifexp -> . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    controlifexp                   shift and go to state 44
    exp                            shift and go to state 45
    lvalue                         shift and go to state 46

state 23

    (37) stmt -> WHILE . controlwhileexp DO block
    (38) controlwhileexp -> . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    controlwhileexp                shift and go to state 47
    exp                            shift and go to state 48
    lvalue                         shift and go to state 46

state 24

    (39) stmt -> FOR . assignstmt TO controlforupexp DO block
    (40) stmt -> FOR . assignstmt DOWNTO controlfordownexp DO block
    (31) assignstmt -> . lvalue ASSIGN exp
    (30) lvalue -> . ID

    ID              shift and go to state 51

    assignstmt                     shift and go to state 49
    lvalue                         shift and go to state 50

state 25

    (43) stmt -> CASE . controlcaseexp caseelement END
    (44) controlcaseexp -> . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    controlcaseexp                 shift and go to state 52
    exp                            shift and go to state 53
    lvalue                         shift and go to state 46

state 26

    (49) stmt -> RETURN . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 54
    lvalue                         shift and go to state 46

state 27

    (50) stmt -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SEMI_COLON      reduce using rule 50 (stmt -> exp .)
    END             reduce using rule 50 (stmt -> exp .)
    ELSE            reduce using rule 50 (stmt -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 28

    (31) assignstmt -> lvalue . ASSIGN exp
    (68) exp -> lvalue .

    ASSIGN          shift and go to state 67
    SUM             reduce using rule 68 (exp -> lvalue .)
    SUB             reduce using rule 68 (exp -> lvalue .)
    MUL             reduce using rule 68 (exp -> lvalue .)
    DIV             reduce using rule 68 (exp -> lvalue .)
    AND             reduce using rule 68 (exp -> lvalue .)
    OR              reduce using rule 68 (exp -> lvalue .)
    NE              reduce using rule 68 (exp -> lvalue .)
    EQ              reduce using rule 68 (exp -> lvalue .)
    LT              reduce using rule 68 (exp -> lvalue .)
    GT              reduce using rule 68 (exp -> lvalue .)
    LE              reduce using rule 68 (exp -> lvalue .)
    GE              reduce using rule 68 (exp -> lvalue .)
    SEMI_COLON      reduce using rule 68 (exp -> lvalue .)
    END             reduce using rule 68 (exp -> lvalue .)
    ELSE            reduce using rule 68 (exp -> lvalue .)


state 29

    (63) exp -> OPEN_PAREN . exp CLOSE_PAREN
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 68
    lvalue                         shift and go to state 46

state 30

    (64) exp -> REALNUMBER .

    SUM             reduce using rule 64 (exp -> REALNUMBER .)
    SUB             reduce using rule 64 (exp -> REALNUMBER .)
    MUL             reduce using rule 64 (exp -> REALNUMBER .)
    DIV             reduce using rule 64 (exp -> REALNUMBER .)
    AND             reduce using rule 64 (exp -> REALNUMBER .)
    OR              reduce using rule 64 (exp -> REALNUMBER .)
    NE              reduce using rule 64 (exp -> REALNUMBER .)
    EQ              reduce using rule 64 (exp -> REALNUMBER .)
    LT              reduce using rule 64 (exp -> REALNUMBER .)
    GT              reduce using rule 64 (exp -> REALNUMBER .)
    LE              reduce using rule 64 (exp -> REALNUMBER .)
    GE              reduce using rule 64 (exp -> REALNUMBER .)
    SEMI_COLON      reduce using rule 64 (exp -> REALNUMBER .)
    END             reduce using rule 64 (exp -> REALNUMBER .)
    THEN            reduce using rule 64 (exp -> REALNUMBER .)
    DO              reduce using rule 64 (exp -> REALNUMBER .)
    INTEGER         reduce using rule 64 (exp -> REALNUMBER .)
    ELSE            reduce using rule 64 (exp -> REALNUMBER .)
    CLOSE_PAREN     reduce using rule 64 (exp -> REALNUMBER .)
    SEPARATOR       reduce using rule 64 (exp -> REALNUMBER .)
    TO              reduce using rule 64 (exp -> REALNUMBER .)
    DOWNTO          reduce using rule 64 (exp -> REALNUMBER .)


state 31

    (65) exp -> INTEGER .

    SUM             reduce using rule 65 (exp -> INTEGER .)
    SUB             reduce using rule 65 (exp -> INTEGER .)
    MUL             reduce using rule 65 (exp -> INTEGER .)
    DIV             reduce using rule 65 (exp -> INTEGER .)
    AND             reduce using rule 65 (exp -> INTEGER .)
    OR              reduce using rule 65 (exp -> INTEGER .)
    NE              reduce using rule 65 (exp -> INTEGER .)
    EQ              reduce using rule 65 (exp -> INTEGER .)
    LT              reduce using rule 65 (exp -> INTEGER .)
    GT              reduce using rule 65 (exp -> INTEGER .)
    LE              reduce using rule 65 (exp -> INTEGER .)
    GE              reduce using rule 65 (exp -> INTEGER .)
    SEMI_COLON      reduce using rule 65 (exp -> INTEGER .)
    END             reduce using rule 65 (exp -> INTEGER .)
    THEN            reduce using rule 65 (exp -> INTEGER .)
    DO              reduce using rule 65 (exp -> INTEGER .)
    INTEGER         reduce using rule 65 (exp -> INTEGER .)
    ELSE            reduce using rule 65 (exp -> INTEGER .)
    CLOSE_PAREN     reduce using rule 65 (exp -> INTEGER .)
    SEPARATOR       reduce using rule 65 (exp -> INTEGER .)
    TO              reduce using rule 65 (exp -> INTEGER .)
    DOWNTO          reduce using rule 65 (exp -> INTEGER .)


state 32

    (66) exp -> TRUE .

    SUM             reduce using rule 66 (exp -> TRUE .)
    SUB             reduce using rule 66 (exp -> TRUE .)
    MUL             reduce using rule 66 (exp -> TRUE .)
    DIV             reduce using rule 66 (exp -> TRUE .)
    AND             reduce using rule 66 (exp -> TRUE .)
    OR              reduce using rule 66 (exp -> TRUE .)
    NE              reduce using rule 66 (exp -> TRUE .)
    EQ              reduce using rule 66 (exp -> TRUE .)
    LT              reduce using rule 66 (exp -> TRUE .)
    GT              reduce using rule 66 (exp -> TRUE .)
    LE              reduce using rule 66 (exp -> TRUE .)
    GE              reduce using rule 66 (exp -> TRUE .)
    SEMI_COLON      reduce using rule 66 (exp -> TRUE .)
    END             reduce using rule 66 (exp -> TRUE .)
    THEN            reduce using rule 66 (exp -> TRUE .)
    DO              reduce using rule 66 (exp -> TRUE .)
    INTEGER         reduce using rule 66 (exp -> TRUE .)
    ELSE            reduce using rule 66 (exp -> TRUE .)
    CLOSE_PAREN     reduce using rule 66 (exp -> TRUE .)
    SEPARATOR       reduce using rule 66 (exp -> TRUE .)
    TO              reduce using rule 66 (exp -> TRUE .)
    DOWNTO          reduce using rule 66 (exp -> TRUE .)


state 33

    (67) exp -> FALSE .

    SUM             reduce using rule 67 (exp -> FALSE .)
    SUB             reduce using rule 67 (exp -> FALSE .)
    MUL             reduce using rule 67 (exp -> FALSE .)
    DIV             reduce using rule 67 (exp -> FALSE .)
    AND             reduce using rule 67 (exp -> FALSE .)
    OR              reduce using rule 67 (exp -> FALSE .)
    NE              reduce using rule 67 (exp -> FALSE .)
    EQ              reduce using rule 67 (exp -> FALSE .)
    LT              reduce using rule 67 (exp -> FALSE .)
    GT              reduce using rule 67 (exp -> FALSE .)
    LE              reduce using rule 67 (exp -> FALSE .)
    GE              reduce using rule 67 (exp -> FALSE .)
    SEMI_COLON      reduce using rule 67 (exp -> FALSE .)
    END             reduce using rule 67 (exp -> FALSE .)
    THEN            reduce using rule 67 (exp -> FALSE .)
    DO              reduce using rule 67 (exp -> FALSE .)
    INTEGER         reduce using rule 67 (exp -> FALSE .)
    ELSE            reduce using rule 67 (exp -> FALSE .)
    CLOSE_PAREN     reduce using rule 67 (exp -> FALSE .)
    SEPARATOR       reduce using rule 67 (exp -> FALSE .)
    TO              reduce using rule 67 (exp -> FALSE .)
    DOWNTO          reduce using rule 67 (exp -> FALSE .)


state 34

    (5) declist -> declist dec .

    PROCEDURE       reduce using rule 5 (declist -> declist dec .)
    FUNCTION        reduce using rule 5 (declist -> declist dec .)
    INT             reduce using rule 5 (declist -> declist dec .)
    REAL            reduce using rule 5 (declist -> declist dec .)
    BOOL            reduce using rule 5 (declist -> declist dec .)
    BEGIN           reduce using rule 5 (declist -> declist dec .)
    IF              reduce using rule 5 (declist -> declist dec .)
    WHILE           reduce using rule 5 (declist -> declist dec .)
    FOR             reduce using rule 5 (declist -> declist dec .)
    CASE            reduce using rule 5 (declist -> declist dec .)
    RETURN          reduce using rule 5 (declist -> declist dec .)
    OPEN_PAREN      reduce using rule 5 (declist -> declist dec .)
    REALNUMBER      reduce using rule 5 (declist -> declist dec .)
    INTEGER         reduce using rule 5 (declist -> declist dec .)
    TRUE            reduce using rule 5 (declist -> declist dec .)
    FALSE           reduce using rule 5 (declist -> declist dec .)
    ID              reduce using rule 5 (declist -> declist dec .)


state 35

    (16) vardec -> type idlist . SEMI_COLON
    (15) idlist -> idlist . SEPARATOR iddec

    SEMI_COLON      shift and go to state 69
    SEPARATOR       shift and go to state 70


state 36

    (14) idlist -> iddec .

    SEMI_COLON      reduce using rule 14 (idlist -> iddec .)
    SEPARATOR       reduce using rule 14 (idlist -> iddec .)


state 37

    (12) iddec -> ID .
    (13) iddec -> ID . ASSIGN exp

    SEMI_COLON      reduce using rule 12 (iddec -> ID .)
    SEPARATOR       reduce using rule 12 (iddec -> ID .)
    ASSIGN          shift and go to state 71


state 38

    (19) procdec -> PROCEDURE ID . OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON

    OPEN_PAREN      shift and go to state 72


state 39

    (20) funcdec -> FUNCTION ID . OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON

    OPEN_PAREN      shift and go to state 73


state 40

    (69) exp -> ID OPEN_PAREN . explist CLOSE_PAREN
    (70) explist -> . exp
    (71) explist -> . explist SEPARATOR exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    explist                        shift and go to state 74
    exp                            shift and go to state 75
    lvalue                         shift and go to state 46

state 41

    (1) program -> PROGRAM ID SEMI_COLON declistlast block SEMI_COLON .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI_COLON declistlast block SEMI_COLON .)


state 42

    (26) block -> BEGIN stmtlist . END
    (29) stmtlist -> stmtlist . SEMI_COLON stmt

    END             shift and go to state 76
    SEMI_COLON      shift and go to state 77


state 43

    (28) stmtlist -> stmt .

    END             reduce using rule 28 (stmtlist -> stmt .)
    SEMI_COLON      reduce using rule 28 (stmtlist -> stmt .)


state 44

    (33) stmt -> IF controlifexp . THEN block
    (34) stmt -> IF controlifexp . THEN block ELSE controlelse block

    THEN            shift and go to state 78


state 45

    (35) controlifexp -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    THEN            reduce using rule 35 (controlifexp -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 46

    (68) exp -> lvalue .

    SUM             reduce using rule 68 (exp -> lvalue .)
    SUB             reduce using rule 68 (exp -> lvalue .)
    MUL             reduce using rule 68 (exp -> lvalue .)
    DIV             reduce using rule 68 (exp -> lvalue .)
    AND             reduce using rule 68 (exp -> lvalue .)
    OR              reduce using rule 68 (exp -> lvalue .)
    NE              reduce using rule 68 (exp -> lvalue .)
    EQ              reduce using rule 68 (exp -> lvalue .)
    LT              reduce using rule 68 (exp -> lvalue .)
    GT              reduce using rule 68 (exp -> lvalue .)
    LE              reduce using rule 68 (exp -> lvalue .)
    GE              reduce using rule 68 (exp -> lvalue .)
    THEN            reduce using rule 68 (exp -> lvalue .)
    DO              reduce using rule 68 (exp -> lvalue .)
    INTEGER         reduce using rule 68 (exp -> lvalue .)
    SEMI_COLON      reduce using rule 68 (exp -> lvalue .)
    END             reduce using rule 68 (exp -> lvalue .)
    ELSE            reduce using rule 68 (exp -> lvalue .)
    CLOSE_PAREN     reduce using rule 68 (exp -> lvalue .)
    SEPARATOR       reduce using rule 68 (exp -> lvalue .)
    TO              reduce using rule 68 (exp -> lvalue .)
    DOWNTO          reduce using rule 68 (exp -> lvalue .)


state 47

    (37) stmt -> WHILE controlwhileexp . DO block

    DO              shift and go to state 79


state 48

    (38) controlwhileexp -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    DO              reduce using rule 38 (controlwhileexp -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 49

    (39) stmt -> FOR assignstmt . TO controlforupexp DO block
    (40) stmt -> FOR assignstmt . DOWNTO controlfordownexp DO block

    TO              shift and go to state 80
    DOWNTO          shift and go to state 81


state 50

    (31) assignstmt -> lvalue . ASSIGN exp

    ASSIGN          shift and go to state 67


state 51

    (30) lvalue -> ID .

    ASSIGN          reduce using rule 30 (lvalue -> ID .)


state 52

    (43) stmt -> CASE controlcaseexp . caseelement END
    (45) caseelement -> . case COLON caseelementcontrol block SEMI_COLON
    (46) caseelement -> . caseelement case COLON caseelementcontrol block SEMI_COLON
    (48) case -> . INTEGER

    INTEGER         shift and go to state 84

    caseelement                    shift and go to state 82
    case                           shift and go to state 83

state 53

    (44) controlcaseexp -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    INTEGER         reduce using rule 44 (controlcaseexp -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 54

    (49) stmt -> RETURN exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SEMI_COLON      reduce using rule 49 (stmt -> RETURN exp .)
    END             reduce using rule 49 (stmt -> RETURN exp .)
    ELSE            reduce using rule 49 (stmt -> RETURN exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 55

    (51) exp -> exp SUM . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 85
    lvalue                         shift and go to state 46

state 56

    (52) exp -> exp SUB . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 86
    lvalue                         shift and go to state 46

state 57

    (53) exp -> exp MUL . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 87
    lvalue                         shift and go to state 46

state 58

    (54) exp -> exp DIV . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 88
    lvalue                         shift and go to state 46

state 59

    (55) exp -> exp AND . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 89
    lvalue                         shift and go to state 46

state 60

    (56) exp -> exp OR . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 90
    lvalue                         shift and go to state 46

state 61

    (57) exp -> exp NE . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 91
    lvalue                         shift and go to state 46

state 62

    (58) exp -> exp EQ . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 92
    lvalue                         shift and go to state 46

state 63

    (59) exp -> exp LT . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 93
    lvalue                         shift and go to state 46

state 64

    (60) exp -> exp GT . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 94
    lvalue                         shift and go to state 46

state 65

    (61) exp -> exp LE . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 95
    lvalue                         shift and go to state 46

state 66

    (62) exp -> exp GE . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 96
    lvalue                         shift and go to state 46

state 67

    (31) assignstmt -> lvalue ASSIGN . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    lvalue                         shift and go to state 46
    exp                            shift and go to state 97

state 68

    (63) exp -> OPEN_PAREN exp . CLOSE_PAREN
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    CLOSE_PAREN     shift and go to state 98
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 69

    (16) vardec -> type idlist SEMI_COLON .

    PROCEDURE       reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    FUNCTION        reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    INT             reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    REAL            reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    BOOL            reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    BEGIN           reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    IF              reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    WHILE           reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    FOR             reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    CASE            reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    RETURN          reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    OPEN_PAREN      reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    REALNUMBER      reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    INTEGER         reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    TRUE            reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    FALSE           reduce using rule 16 (vardec -> type idlist SEMI_COLON .)
    ID              reduce using rule 16 (vardec -> type idlist SEMI_COLON .)


state 70

    (15) idlist -> idlist SEPARATOR . iddec
    (12) iddec -> . ID
    (13) iddec -> . ID ASSIGN exp

    ID              shift and go to state 37

    iddec                          shift and go to state 99

state 71

    (13) iddec -> ID ASSIGN . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 100
    lvalue                         shift and go to state 46

state 72

    (19) procdec -> PROCEDURE ID OPEN_PAREN . paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
    (17) paramdecslast -> . paramdecs
    (18) paramdecslast -> .
    (21) paramdecs -> . paramdec
    (22) paramdecs -> . paramdecs SEMI_COLON paramdec
    (23) paramdec -> . type paramlist
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    CLOSE_PAREN     reduce using rule 18 (paramdecslast -> .)
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    paramdecslast                  shift and go to state 101
    paramdecs                      shift and go to state 102
    paramdec                       shift and go to state 103
    type                           shift and go to state 104

state 73

    (20) funcdec -> FUNCTION ID OPEN_PAREN . paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
    (17) paramdecslast -> . paramdecs
    (18) paramdecslast -> .
    (21) paramdecs -> . paramdec
    (22) paramdecs -> . paramdecs SEMI_COLON paramdec
    (23) paramdec -> . type paramlist
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    CLOSE_PAREN     reduce using rule 18 (paramdecslast -> .)
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    paramdecslast                  shift and go to state 105
    type                           shift and go to state 104
    paramdecs                      shift and go to state 102
    paramdec                       shift and go to state 103

state 74

    (69) exp -> ID OPEN_PAREN explist . CLOSE_PAREN
    (71) explist -> explist . SEPARATOR exp

    CLOSE_PAREN     shift and go to state 106
    SEPARATOR       shift and go to state 107


state 75

    (70) explist -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    CLOSE_PAREN     reduce using rule 70 (explist -> exp .)
    SEPARATOR       reduce using rule 70 (explist -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 76

    (26) block -> BEGIN stmtlist END .

    SEMI_COLON      reduce using rule 26 (block -> BEGIN stmtlist END .)
    ELSE            reduce using rule 26 (block -> BEGIN stmtlist END .)
    END             reduce using rule 26 (block -> BEGIN stmtlist END .)


state 77

    (29) stmtlist -> stmtlist SEMI_COLON . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    stmt                           shift and go to state 108
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 78

    (33) stmt -> IF controlifexp THEN . block
    (34) stmt -> IF controlifexp THEN . block ELSE controlelse block
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 109
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 79

    (37) stmt -> WHILE controlwhileexp DO . block
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 110
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 80

    (39) stmt -> FOR assignstmt TO . controlforupexp DO block
    (41) controlforupexp -> . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    controlforupexp                shift and go to state 111
    exp                            shift and go to state 112
    lvalue                         shift and go to state 46

state 81

    (40) stmt -> FOR assignstmt DOWNTO . controlfordownexp DO block
    (42) controlfordownexp -> . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    controlfordownexp              shift and go to state 113
    exp                            shift and go to state 114
    lvalue                         shift and go to state 46

state 82

    (43) stmt -> CASE controlcaseexp caseelement . END
    (46) caseelement -> caseelement . case COLON caseelementcontrol block SEMI_COLON
    (48) case -> . INTEGER

    END             shift and go to state 115
    INTEGER         shift and go to state 84

    case                           shift and go to state 116

state 83

    (45) caseelement -> case . COLON caseelementcontrol block SEMI_COLON

    COLON           shift and go to state 117


state 84

    (48) case -> INTEGER .

    COLON           reduce using rule 48 (case -> INTEGER .)


state 85

    (51) exp -> exp SUM exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SUM             reduce using rule 51 (exp -> exp SUM exp .)
    SUB             reduce using rule 51 (exp -> exp SUM exp .)
    AND             reduce using rule 51 (exp -> exp SUM exp .)
    OR              reduce using rule 51 (exp -> exp SUM exp .)
    NE              reduce using rule 51 (exp -> exp SUM exp .)
    EQ              reduce using rule 51 (exp -> exp SUM exp .)
    LT              reduce using rule 51 (exp -> exp SUM exp .)
    GT              reduce using rule 51 (exp -> exp SUM exp .)
    LE              reduce using rule 51 (exp -> exp SUM exp .)
    GE              reduce using rule 51 (exp -> exp SUM exp .)
    SEMI_COLON      reduce using rule 51 (exp -> exp SUM exp .)
    END             reduce using rule 51 (exp -> exp SUM exp .)
    THEN            reduce using rule 51 (exp -> exp SUM exp .)
    DO              reduce using rule 51 (exp -> exp SUM exp .)
    INTEGER         reduce using rule 51 (exp -> exp SUM exp .)
    ELSE            reduce using rule 51 (exp -> exp SUM exp .)
    CLOSE_PAREN     reduce using rule 51 (exp -> exp SUM exp .)
    SEPARATOR       reduce using rule 51 (exp -> exp SUM exp .)
    TO              reduce using rule 51 (exp -> exp SUM exp .)
    DOWNTO          reduce using rule 51 (exp -> exp SUM exp .)
    MUL             shift and go to state 57
    DIV             shift and go to state 58

  ! MUL             [ reduce using rule 51 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp SUM exp .) ]
  ! SUM             [ shift and go to state 55 ]
  ! SUB             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 66 ]


state 86

    (52) exp -> exp SUB exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SUM             reduce using rule 52 (exp -> exp SUB exp .)
    SUB             reduce using rule 52 (exp -> exp SUB exp .)
    AND             reduce using rule 52 (exp -> exp SUB exp .)
    OR              reduce using rule 52 (exp -> exp SUB exp .)
    NE              reduce using rule 52 (exp -> exp SUB exp .)
    EQ              reduce using rule 52 (exp -> exp SUB exp .)
    LT              reduce using rule 52 (exp -> exp SUB exp .)
    GT              reduce using rule 52 (exp -> exp SUB exp .)
    LE              reduce using rule 52 (exp -> exp SUB exp .)
    GE              reduce using rule 52 (exp -> exp SUB exp .)
    SEMI_COLON      reduce using rule 52 (exp -> exp SUB exp .)
    END             reduce using rule 52 (exp -> exp SUB exp .)
    THEN            reduce using rule 52 (exp -> exp SUB exp .)
    DO              reduce using rule 52 (exp -> exp SUB exp .)
    INTEGER         reduce using rule 52 (exp -> exp SUB exp .)
    ELSE            reduce using rule 52 (exp -> exp SUB exp .)
    CLOSE_PAREN     reduce using rule 52 (exp -> exp SUB exp .)
    SEPARATOR       reduce using rule 52 (exp -> exp SUB exp .)
    TO              reduce using rule 52 (exp -> exp SUB exp .)
    DOWNTO          reduce using rule 52 (exp -> exp SUB exp .)
    MUL             shift and go to state 57
    DIV             shift and go to state 58

  ! MUL             [ reduce using rule 52 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp SUB exp .) ]
  ! SUM             [ shift and go to state 55 ]
  ! SUB             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 66 ]


state 87

    (53) exp -> exp MUL exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SUM             reduce using rule 53 (exp -> exp MUL exp .)
    SUB             reduce using rule 53 (exp -> exp MUL exp .)
    MUL             reduce using rule 53 (exp -> exp MUL exp .)
    DIV             reduce using rule 53 (exp -> exp MUL exp .)
    AND             reduce using rule 53 (exp -> exp MUL exp .)
    OR              reduce using rule 53 (exp -> exp MUL exp .)
    NE              reduce using rule 53 (exp -> exp MUL exp .)
    EQ              reduce using rule 53 (exp -> exp MUL exp .)
    LT              reduce using rule 53 (exp -> exp MUL exp .)
    GT              reduce using rule 53 (exp -> exp MUL exp .)
    LE              reduce using rule 53 (exp -> exp MUL exp .)
    GE              reduce using rule 53 (exp -> exp MUL exp .)
    SEMI_COLON      reduce using rule 53 (exp -> exp MUL exp .)
    END             reduce using rule 53 (exp -> exp MUL exp .)
    THEN            reduce using rule 53 (exp -> exp MUL exp .)
    DO              reduce using rule 53 (exp -> exp MUL exp .)
    INTEGER         reduce using rule 53 (exp -> exp MUL exp .)
    ELSE            reduce using rule 53 (exp -> exp MUL exp .)
    CLOSE_PAREN     reduce using rule 53 (exp -> exp MUL exp .)
    SEPARATOR       reduce using rule 53 (exp -> exp MUL exp .)
    TO              reduce using rule 53 (exp -> exp MUL exp .)
    DOWNTO          reduce using rule 53 (exp -> exp MUL exp .)

  ! SUM             [ shift and go to state 55 ]
  ! SUB             [ shift and go to state 56 ]
  ! MUL             [ shift and go to state 57 ]
  ! DIV             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 66 ]


state 88

    (54) exp -> exp DIV exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SUM             reduce using rule 54 (exp -> exp DIV exp .)
    SUB             reduce using rule 54 (exp -> exp DIV exp .)
    MUL             reduce using rule 54 (exp -> exp DIV exp .)
    DIV             reduce using rule 54 (exp -> exp DIV exp .)
    AND             reduce using rule 54 (exp -> exp DIV exp .)
    OR              reduce using rule 54 (exp -> exp DIV exp .)
    NE              reduce using rule 54 (exp -> exp DIV exp .)
    EQ              reduce using rule 54 (exp -> exp DIV exp .)
    LT              reduce using rule 54 (exp -> exp DIV exp .)
    GT              reduce using rule 54 (exp -> exp DIV exp .)
    LE              reduce using rule 54 (exp -> exp DIV exp .)
    GE              reduce using rule 54 (exp -> exp DIV exp .)
    SEMI_COLON      reduce using rule 54 (exp -> exp DIV exp .)
    END             reduce using rule 54 (exp -> exp DIV exp .)
    THEN            reduce using rule 54 (exp -> exp DIV exp .)
    DO              reduce using rule 54 (exp -> exp DIV exp .)
    INTEGER         reduce using rule 54 (exp -> exp DIV exp .)
    ELSE            reduce using rule 54 (exp -> exp DIV exp .)
    CLOSE_PAREN     reduce using rule 54 (exp -> exp DIV exp .)
    SEPARATOR       reduce using rule 54 (exp -> exp DIV exp .)
    TO              reduce using rule 54 (exp -> exp DIV exp .)
    DOWNTO          reduce using rule 54 (exp -> exp DIV exp .)

  ! SUM             [ shift and go to state 55 ]
  ! SUB             [ shift and go to state 56 ]
  ! MUL             [ shift and go to state 57 ]
  ! DIV             [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 66 ]


state 89

    (55) exp -> exp AND exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 55 (exp -> exp AND exp .)
    OR              reduce using rule 55 (exp -> exp AND exp .)
    SEMI_COLON      reduce using rule 55 (exp -> exp AND exp .)
    END             reduce using rule 55 (exp -> exp AND exp .)
    THEN            reduce using rule 55 (exp -> exp AND exp .)
    DO              reduce using rule 55 (exp -> exp AND exp .)
    INTEGER         reduce using rule 55 (exp -> exp AND exp .)
    ELSE            reduce using rule 55 (exp -> exp AND exp .)
    CLOSE_PAREN     reduce using rule 55 (exp -> exp AND exp .)
    SEPARATOR       reduce using rule 55 (exp -> exp AND exp .)
    TO              reduce using rule 55 (exp -> exp AND exp .)
    DOWNTO          reduce using rule 55 (exp -> exp AND exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66

  ! SUM             [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 55 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 90

    (56) exp -> exp OR exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    OR              reduce using rule 56 (exp -> exp OR exp .)
    SEMI_COLON      reduce using rule 56 (exp -> exp OR exp .)
    END             reduce using rule 56 (exp -> exp OR exp .)
    THEN            reduce using rule 56 (exp -> exp OR exp .)
    DO              reduce using rule 56 (exp -> exp OR exp .)
    INTEGER         reduce using rule 56 (exp -> exp OR exp .)
    ELSE            reduce using rule 56 (exp -> exp OR exp .)
    CLOSE_PAREN     reduce using rule 56 (exp -> exp OR exp .)
    SEPARATOR       reduce using rule 56 (exp -> exp OR exp .)
    TO              reduce using rule 56 (exp -> exp OR exp .)
    DOWNTO          reduce using rule 56 (exp -> exp OR exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66

  ! SUM             [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 56 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 60 ]


state 91

    (57) exp -> exp NE exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 57 (exp -> exp NE exp .)
    OR              reduce using rule 57 (exp -> exp NE exp .)
    NE              reduce using rule 57 (exp -> exp NE exp .)
    LT              reduce using rule 57 (exp -> exp NE exp .)
    GT              reduce using rule 57 (exp -> exp NE exp .)
    GE              reduce using rule 57 (exp -> exp NE exp .)
    SEMI_COLON      reduce using rule 57 (exp -> exp NE exp .)
    END             reduce using rule 57 (exp -> exp NE exp .)
    THEN            reduce using rule 57 (exp -> exp NE exp .)
    DO              reduce using rule 57 (exp -> exp NE exp .)
    INTEGER         reduce using rule 57 (exp -> exp NE exp .)
    ELSE            reduce using rule 57 (exp -> exp NE exp .)
    CLOSE_PAREN     reduce using rule 57 (exp -> exp NE exp .)
    SEPARATOR       reduce using rule 57 (exp -> exp NE exp .)
    TO              reduce using rule 57 (exp -> exp NE exp .)
    DOWNTO          reduce using rule 57 (exp -> exp NE exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    EQ              shift and go to state 62
    LE              shift and go to state 65

  ! SUM             [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! EQ              [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! LE              [ reduce using rule 57 (exp -> exp NE exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 66 ]


state 92

    (58) exp -> exp EQ exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 58 (exp -> exp EQ exp .)
    OR              reduce using rule 58 (exp -> exp EQ exp .)
    NE              reduce using rule 58 (exp -> exp EQ exp .)
    EQ              reduce using rule 58 (exp -> exp EQ exp .)
    LT              reduce using rule 58 (exp -> exp EQ exp .)
    GT              reduce using rule 58 (exp -> exp EQ exp .)
    GE              reduce using rule 58 (exp -> exp EQ exp .)
    SEMI_COLON      reduce using rule 58 (exp -> exp EQ exp .)
    END             reduce using rule 58 (exp -> exp EQ exp .)
    THEN            reduce using rule 58 (exp -> exp EQ exp .)
    DO              reduce using rule 58 (exp -> exp EQ exp .)
    INTEGER         reduce using rule 58 (exp -> exp EQ exp .)
    ELSE            reduce using rule 58 (exp -> exp EQ exp .)
    CLOSE_PAREN     reduce using rule 58 (exp -> exp EQ exp .)
    SEPARATOR       reduce using rule 58 (exp -> exp EQ exp .)
    TO              reduce using rule 58 (exp -> exp EQ exp .)
    DOWNTO          reduce using rule 58 (exp -> exp EQ exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    LE              shift and go to state 65

  ! SUM             [ reduce using rule 58 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 58 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 58 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 58 (exp -> exp EQ exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 66 ]


state 93

    (59) exp -> exp LT exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 59 (exp -> exp LT exp .)
    OR              reduce using rule 59 (exp -> exp LT exp .)
    LT              reduce using rule 59 (exp -> exp LT exp .)
    SEMI_COLON      reduce using rule 59 (exp -> exp LT exp .)
    END             reduce using rule 59 (exp -> exp LT exp .)
    THEN            reduce using rule 59 (exp -> exp LT exp .)
    DO              reduce using rule 59 (exp -> exp LT exp .)
    INTEGER         reduce using rule 59 (exp -> exp LT exp .)
    ELSE            reduce using rule 59 (exp -> exp LT exp .)
    CLOSE_PAREN     reduce using rule 59 (exp -> exp LT exp .)
    SEPARATOR       reduce using rule 59 (exp -> exp LT exp .)
    TO              reduce using rule 59 (exp -> exp LT exp .)
    DOWNTO          reduce using rule 59 (exp -> exp LT exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    NE              shift and go to state 61
    EQ              shift and go to state 62
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66

  ! SUM             [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! NE              [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! EQ              [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! GT              [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! LE              [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! GE              [ reduce using rule 59 (exp -> exp LT exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 63 ]


state 94

    (60) exp -> exp GT exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 60 (exp -> exp GT exp .)
    OR              reduce using rule 60 (exp -> exp GT exp .)
    LT              reduce using rule 60 (exp -> exp GT exp .)
    GT              reduce using rule 60 (exp -> exp GT exp .)
    SEMI_COLON      reduce using rule 60 (exp -> exp GT exp .)
    END             reduce using rule 60 (exp -> exp GT exp .)
    THEN            reduce using rule 60 (exp -> exp GT exp .)
    DO              reduce using rule 60 (exp -> exp GT exp .)
    INTEGER         reduce using rule 60 (exp -> exp GT exp .)
    ELSE            reduce using rule 60 (exp -> exp GT exp .)
    CLOSE_PAREN     reduce using rule 60 (exp -> exp GT exp .)
    SEPARATOR       reduce using rule 60 (exp -> exp GT exp .)
    TO              reduce using rule 60 (exp -> exp GT exp .)
    DOWNTO          reduce using rule 60 (exp -> exp GT exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LE              shift and go to state 65
    GE              shift and go to state 66

  ! SUM             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! NE              [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! EQ              [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! LE              [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! GE              [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]


state 95

    (61) exp -> exp LE exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 61 (exp -> exp LE exp .)
    OR              reduce using rule 61 (exp -> exp LE exp .)
    NE              reduce using rule 61 (exp -> exp LE exp .)
    EQ              reduce using rule 61 (exp -> exp LE exp .)
    LT              reduce using rule 61 (exp -> exp LE exp .)
    GT              reduce using rule 61 (exp -> exp LE exp .)
    LE              reduce using rule 61 (exp -> exp LE exp .)
    GE              reduce using rule 61 (exp -> exp LE exp .)
    SEMI_COLON      reduce using rule 61 (exp -> exp LE exp .)
    END             reduce using rule 61 (exp -> exp LE exp .)
    THEN            reduce using rule 61 (exp -> exp LE exp .)
    DO              reduce using rule 61 (exp -> exp LE exp .)
    INTEGER         reduce using rule 61 (exp -> exp LE exp .)
    ELSE            reduce using rule 61 (exp -> exp LE exp .)
    CLOSE_PAREN     reduce using rule 61 (exp -> exp LE exp .)
    SEPARATOR       reduce using rule 61 (exp -> exp LE exp .)
    TO              reduce using rule 61 (exp -> exp LE exp .)
    DOWNTO          reduce using rule 61 (exp -> exp LE exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58

  ! SUM             [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! GE              [ shift and go to state 66 ]


state 96

    (62) exp -> exp GE exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    AND             reduce using rule 62 (exp -> exp GE exp .)
    OR              reduce using rule 62 (exp -> exp GE exp .)
    LT              reduce using rule 62 (exp -> exp GE exp .)
    GT              reduce using rule 62 (exp -> exp GE exp .)
    GE              reduce using rule 62 (exp -> exp GE exp .)
    SEMI_COLON      reduce using rule 62 (exp -> exp GE exp .)
    END             reduce using rule 62 (exp -> exp GE exp .)
    THEN            reduce using rule 62 (exp -> exp GE exp .)
    DO              reduce using rule 62 (exp -> exp GE exp .)
    INTEGER         reduce using rule 62 (exp -> exp GE exp .)
    ELSE            reduce using rule 62 (exp -> exp GE exp .)
    CLOSE_PAREN     reduce using rule 62 (exp -> exp GE exp .)
    SEPARATOR       reduce using rule 62 (exp -> exp GE exp .)
    TO              reduce using rule 62 (exp -> exp GE exp .)
    DOWNTO          reduce using rule 62 (exp -> exp GE exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LE              shift and go to state 65

  ! SUM             [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! NE              [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! EQ              [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! LE              [ reduce using rule 62 (exp -> exp GE exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! LT              [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! GE              [ shift and go to state 66 ]


state 97

    (31) assignstmt -> lvalue ASSIGN exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SEMI_COLON      reduce using rule 31 (assignstmt -> lvalue ASSIGN exp .)
    END             reduce using rule 31 (assignstmt -> lvalue ASSIGN exp .)
    TO              reduce using rule 31 (assignstmt -> lvalue ASSIGN exp .)
    DOWNTO          reduce using rule 31 (assignstmt -> lvalue ASSIGN exp .)
    ELSE            reduce using rule 31 (assignstmt -> lvalue ASSIGN exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 98

    (63) exp -> OPEN_PAREN exp CLOSE_PAREN .

    SUM             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    SUB             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    MUL             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    DIV             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    AND             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    OR              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    NE              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    EQ              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    LT              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    GT              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    LE              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    GE              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    END             reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    THEN            reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    DO              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    INTEGER         reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    ELSE            reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    SEPARATOR       reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    TO              reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)
    DOWNTO          reduce using rule 63 (exp -> OPEN_PAREN exp CLOSE_PAREN .)


state 99

    (15) idlist -> idlist SEPARATOR iddec .

    SEMI_COLON      reduce using rule 15 (idlist -> idlist SEPARATOR iddec .)
    SEPARATOR       reduce using rule 15 (idlist -> idlist SEPARATOR iddec .)


state 100

    (13) iddec -> ID ASSIGN exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    SEMI_COLON      reduce using rule 13 (iddec -> ID ASSIGN exp .)
    SEPARATOR       reduce using rule 13 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 101

    (19) procdec -> PROCEDURE ID OPEN_PAREN paramdecslast . CLOSE_PAREN declistlast block SEMI_COLON

    CLOSE_PAREN     shift and go to state 118


state 102

    (17) paramdecslast -> paramdecs .
    (22) paramdecs -> paramdecs . SEMI_COLON paramdec

    CLOSE_PAREN     reduce using rule 17 (paramdecslast -> paramdecs .)
    SEMI_COLON      shift and go to state 119


state 103

    (21) paramdecs -> paramdec .

    SEMI_COLON      reduce using rule 21 (paramdecs -> paramdec .)
    CLOSE_PAREN     reduce using rule 21 (paramdecs -> paramdec .)


state 104

    (23) paramdec -> type . paramlist
    (24) paramlist -> . ID
    (25) paramlist -> . paramlist SEPARATOR ID

    ID              shift and go to state 121

    paramlist                      shift and go to state 120

state 105

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast . CLOSE_PAREN COLON type declistlast block SEMI_COLON

    CLOSE_PAREN     shift and go to state 122


state 106

    (69) exp -> ID OPEN_PAREN explist CLOSE_PAREN .

    SUM             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    SUB             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    MUL             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    DIV             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    AND             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    OR              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    NE              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    EQ              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    LT              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    GT              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    LE              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    GE              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    END             reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    THEN            reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    DO              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    INTEGER         reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    ELSE            reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    SEPARATOR       reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    TO              reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)
    DOWNTO          reduce using rule 69 (exp -> ID OPEN_PAREN explist CLOSE_PAREN .)


state 107

    (71) explist -> explist SEPARATOR . exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    exp                            shift and go to state 123
    lvalue                         shift and go to state 46

state 108

    (29) stmtlist -> stmtlist SEMI_COLON stmt .

    END             reduce using rule 29 (stmtlist -> stmtlist SEMI_COLON stmt .)
    SEMI_COLON      reduce using rule 29 (stmtlist -> stmtlist SEMI_COLON stmt .)


state 109

    (33) stmt -> IF controlifexp THEN block .
    (34) stmt -> IF controlifexp THEN block . ELSE controlelse block

    SEMI_COLON      reduce using rule 33 (stmt -> IF controlifexp THEN block .)
    END             reduce using rule 33 (stmt -> IF controlifexp THEN block .)
    ELSE            shift and go to state 124

  ! ELSE            [ reduce using rule 33 (stmt -> IF controlifexp THEN block .) ]


state 110

    (37) stmt -> WHILE controlwhileexp DO block .

    SEMI_COLON      reduce using rule 37 (stmt -> WHILE controlwhileexp DO block .)
    END             reduce using rule 37 (stmt -> WHILE controlwhileexp DO block .)
    ELSE            reduce using rule 37 (stmt -> WHILE controlwhileexp DO block .)


state 111

    (39) stmt -> FOR assignstmt TO controlforupexp . DO block

    DO              shift and go to state 125


state 112

    (41) controlforupexp -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    DO              reduce using rule 41 (controlforupexp -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 113

    (40) stmt -> FOR assignstmt DOWNTO controlfordownexp . DO block

    DO              shift and go to state 126


state 114

    (42) controlfordownexp -> exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    DO              reduce using rule 42 (controlfordownexp -> exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 115

    (43) stmt -> CASE controlcaseexp caseelement END .

    SEMI_COLON      reduce using rule 43 (stmt -> CASE controlcaseexp caseelement END .)
    END             reduce using rule 43 (stmt -> CASE controlcaseexp caseelement END .)
    ELSE            reduce using rule 43 (stmt -> CASE controlcaseexp caseelement END .)


state 116

    (46) caseelement -> caseelement case . COLON caseelementcontrol block SEMI_COLON

    COLON           shift and go to state 127


state 117

    (45) caseelement -> case COLON . caseelementcontrol block SEMI_COLON
    (47) caseelementcontrol -> .

    BEGIN           reduce using rule 47 (caseelementcontrol -> .)
    IF              reduce using rule 47 (caseelementcontrol -> .)
    WHILE           reduce using rule 47 (caseelementcontrol -> .)
    FOR             reduce using rule 47 (caseelementcontrol -> .)
    CASE            reduce using rule 47 (caseelementcontrol -> .)
    RETURN          reduce using rule 47 (caseelementcontrol -> .)
    OPEN_PAREN      reduce using rule 47 (caseelementcontrol -> .)
    REALNUMBER      reduce using rule 47 (caseelementcontrol -> .)
    INTEGER         reduce using rule 47 (caseelementcontrol -> .)
    TRUE            reduce using rule 47 (caseelementcontrol -> .)
    FALSE           reduce using rule 47 (caseelementcontrol -> .)
    ID              reduce using rule 47 (caseelementcontrol -> .)

    caseelementcontrol             shift and go to state 128

state 118

    (19) procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN . declistlast block SEMI_COLON
    (2) declistlast -> . declist
    (3) declistlast -> .
    (4) declist -> . dec
    (5) declist -> . declist dec
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (16) vardec -> . type idlist SEMI_COLON
    (19) procdec -> . PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
    (20) funcdec -> . FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    BEGIN           reduce using rule 3 (declistlast -> .)
    IF              reduce using rule 3 (declistlast -> .)
    WHILE           reduce using rule 3 (declistlast -> .)
    FOR             reduce using rule 3 (declistlast -> .)
    CASE            reduce using rule 3 (declistlast -> .)
    RETURN          reduce using rule 3 (declistlast -> .)
    OPEN_PAREN      reduce using rule 3 (declistlast -> .)
    REALNUMBER      reduce using rule 3 (declistlast -> .)
    INTEGER         reduce using rule 3 (declistlast -> .)
    TRUE            reduce using rule 3 (declistlast -> .)
    FALSE           reduce using rule 3 (declistlast -> .)
    ID              reduce using rule 3 (declistlast -> .)
    PROCEDURE       shift and go to state 12
    FUNCTION        shift and go to state 13
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    declistlast                    shift and go to state 129
    declist                        shift and go to state 6
    dec                            shift and go to state 7
    vardec                         shift and go to state 8
    procdec                        shift and go to state 9
    funcdec                        shift and go to state 10
    type                           shift and go to state 11

state 119

    (22) paramdecs -> paramdecs SEMI_COLON . paramdec
    (23) paramdec -> . type paramlist
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    paramdec                       shift and go to state 130
    type                           shift and go to state 104

state 120

    (23) paramdec -> type paramlist .
    (25) paramlist -> paramlist . SEPARATOR ID

    SEMI_COLON      reduce using rule 23 (paramdec -> type paramlist .)
    CLOSE_PAREN     reduce using rule 23 (paramdec -> type paramlist .)
    SEPARATOR       shift and go to state 131


state 121

    (24) paramlist -> ID .

    SEPARATOR       reduce using rule 24 (paramlist -> ID .)
    SEMI_COLON      reduce using rule 24 (paramlist -> ID .)
    CLOSE_PAREN     reduce using rule 24 (paramlist -> ID .)


state 122

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN . COLON type declistlast block SEMI_COLON

    COLON           shift and go to state 132


state 123

    (71) explist -> explist SEPARATOR exp .
    (51) exp -> exp . SUM exp
    (52) exp -> exp . SUB exp
    (53) exp -> exp . MUL exp
    (54) exp -> exp . DIV exp
    (55) exp -> exp . AND exp
    (56) exp -> exp . OR exp
    (57) exp -> exp . NE exp
    (58) exp -> exp . EQ exp
    (59) exp -> exp . LT exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GE exp

    CLOSE_PAREN     reduce using rule 71 (explist -> explist SEPARATOR exp .)
    SEPARATOR       reduce using rule 71 (explist -> explist SEPARATOR exp .)
    SUM             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    NE              shift and go to state 61
    EQ              shift and go to state 62
    LT              shift and go to state 63
    GT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66


state 124

    (34) stmt -> IF controlifexp THEN block ELSE . controlelse block
    (36) controlelse -> .

    BEGIN           reduce using rule 36 (controlelse -> .)
    IF              reduce using rule 36 (controlelse -> .)
    WHILE           reduce using rule 36 (controlelse -> .)
    FOR             reduce using rule 36 (controlelse -> .)
    CASE            reduce using rule 36 (controlelse -> .)
    RETURN          reduce using rule 36 (controlelse -> .)
    OPEN_PAREN      reduce using rule 36 (controlelse -> .)
    REALNUMBER      reduce using rule 36 (controlelse -> .)
    INTEGER         reduce using rule 36 (controlelse -> .)
    TRUE            reduce using rule 36 (controlelse -> .)
    FALSE           reduce using rule 36 (controlelse -> .)
    ID              reduce using rule 36 (controlelse -> .)

    controlelse                    shift and go to state 133

state 125

    (39) stmt -> FOR assignstmt TO controlforupexp DO . block
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    assignstmt                     shift and go to state 21
    block                          shift and go to state 134
    stmt                           shift and go to state 20
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 126

    (40) stmt -> FOR assignstmt DOWNTO controlfordownexp DO . block
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    assignstmt                     shift and go to state 21
    block                          shift and go to state 135
    stmt                           shift and go to state 20
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 127

    (46) caseelement -> caseelement case COLON . caseelementcontrol block SEMI_COLON
    (47) caseelementcontrol -> .

    BEGIN           reduce using rule 47 (caseelementcontrol -> .)
    IF              reduce using rule 47 (caseelementcontrol -> .)
    WHILE           reduce using rule 47 (caseelementcontrol -> .)
    FOR             reduce using rule 47 (caseelementcontrol -> .)
    CASE            reduce using rule 47 (caseelementcontrol -> .)
    RETURN          reduce using rule 47 (caseelementcontrol -> .)
    OPEN_PAREN      reduce using rule 47 (caseelementcontrol -> .)
    REALNUMBER      reduce using rule 47 (caseelementcontrol -> .)
    INTEGER         reduce using rule 47 (caseelementcontrol -> .)
    TRUE            reduce using rule 47 (caseelementcontrol -> .)
    FALSE           reduce using rule 47 (caseelementcontrol -> .)
    ID              reduce using rule 47 (caseelementcontrol -> .)

    caseelementcontrol             shift and go to state 136

state 128

    (45) caseelement -> case COLON caseelementcontrol . block SEMI_COLON
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 137
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 129

    (19) procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast . block SEMI_COLON
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 138
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 130

    (22) paramdecs -> paramdecs SEMI_COLON paramdec .

    SEMI_COLON      reduce using rule 22 (paramdecs -> paramdecs SEMI_COLON paramdec .)
    CLOSE_PAREN     reduce using rule 22 (paramdecs -> paramdecs SEMI_COLON paramdec .)


state 131

    (25) paramlist -> paramlist SEPARATOR . ID

    ID              shift and go to state 139


state 132

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON . type declistlast block SEMI_COLON
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    type                           shift and go to state 140

state 133

    (34) stmt -> IF controlifexp THEN block ELSE controlelse . block
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 141
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 134

    (39) stmt -> FOR assignstmt TO controlforupexp DO block .

    SEMI_COLON      reduce using rule 39 (stmt -> FOR assignstmt TO controlforupexp DO block .)
    END             reduce using rule 39 (stmt -> FOR assignstmt TO controlforupexp DO block .)
    ELSE            reduce using rule 39 (stmt -> FOR assignstmt TO controlforupexp DO block .)


state 135

    (40) stmt -> FOR assignstmt DOWNTO controlfordownexp DO block .

    SEMI_COLON      reduce using rule 40 (stmt -> FOR assignstmt DOWNTO controlfordownexp DO block .)
    END             reduce using rule 40 (stmt -> FOR assignstmt DOWNTO controlfordownexp DO block .)
    ELSE            reduce using rule 40 (stmt -> FOR assignstmt DOWNTO controlfordownexp DO block .)


state 136

    (46) caseelement -> caseelement case COLON caseelementcontrol . block SEMI_COLON
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 142
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 137

    (45) caseelement -> case COLON caseelementcontrol block . SEMI_COLON

    SEMI_COLON      shift and go to state 143


state 138

    (19) procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block . SEMI_COLON

    SEMI_COLON      shift and go to state 144


state 139

    (25) paramlist -> paramlist SEPARATOR ID .

    SEPARATOR       reduce using rule 25 (paramlist -> paramlist SEPARATOR ID .)
    SEMI_COLON      reduce using rule 25 (paramlist -> paramlist SEPARATOR ID .)
    CLOSE_PAREN     reduce using rule 25 (paramlist -> paramlist SEPARATOR ID .)


state 140

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type . declistlast block SEMI_COLON
    (2) declistlast -> . declist
    (3) declistlast -> .
    (4) declist -> . dec
    (5) declist -> . declist dec
    (6) dec -> . vardec
    (7) dec -> . procdec
    (8) dec -> . funcdec
    (16) vardec -> . type idlist SEMI_COLON
    (19) procdec -> . PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON
    (20) funcdec -> . FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . BOOL

    BEGIN           reduce using rule 3 (declistlast -> .)
    IF              reduce using rule 3 (declistlast -> .)
    WHILE           reduce using rule 3 (declistlast -> .)
    FOR             reduce using rule 3 (declistlast -> .)
    CASE            reduce using rule 3 (declistlast -> .)
    RETURN          reduce using rule 3 (declistlast -> .)
    OPEN_PAREN      reduce using rule 3 (declistlast -> .)
    REALNUMBER      reduce using rule 3 (declistlast -> .)
    INTEGER         reduce using rule 3 (declistlast -> .)
    TRUE            reduce using rule 3 (declistlast -> .)
    FALSE           reduce using rule 3 (declistlast -> .)
    ID              reduce using rule 3 (declistlast -> .)
    PROCEDURE       shift and go to state 12
    FUNCTION        shift and go to state 13
    INT             shift and go to state 14
    REAL            shift and go to state 15
    BOOL            shift and go to state 16

    type                           shift and go to state 11
    declistlast                    shift and go to state 145
    declist                        shift and go to state 6
    dec                            shift and go to state 7
    vardec                         shift and go to state 8
    procdec                        shift and go to state 9
    funcdec                        shift and go to state 10

state 141

    (34) stmt -> IF controlifexp THEN block ELSE controlelse block .

    SEMI_COLON      reduce using rule 34 (stmt -> IF controlifexp THEN block ELSE controlelse block .)
    END             reduce using rule 34 (stmt -> IF controlifexp THEN block ELSE controlelse block .)
    ELSE            reduce using rule 34 (stmt -> IF controlifexp THEN block ELSE controlelse block .)


state 142

    (46) caseelement -> caseelement case COLON caseelementcontrol block . SEMI_COLON

    SEMI_COLON      shift and go to state 146


state 143

    (45) caseelement -> case COLON caseelementcontrol block SEMI_COLON .

    END             reduce using rule 45 (caseelement -> case COLON caseelementcontrol block SEMI_COLON .)
    INTEGER         reduce using rule 45 (caseelement -> case COLON caseelementcontrol block SEMI_COLON .)


state 144

    (19) procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .

    PROCEDURE       reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    FUNCTION        reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    INT             reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    REAL            reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    BOOL            reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    BEGIN           reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    IF              reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    WHILE           reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    FOR             reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    CASE            reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    RETURN          reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    OPEN_PAREN      reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    REALNUMBER      reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    INTEGER         reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    TRUE            reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    FALSE           reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)
    ID              reduce using rule 19 (procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON .)


state 145

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast . block SEMI_COLON
    (26) block -> . BEGIN stmtlist END
    (27) block -> . stmt
    (32) stmt -> . assignstmt
    (33) stmt -> . IF controlifexp THEN block
    (34) stmt -> . IF controlifexp THEN block ELSE controlelse block
    (37) stmt -> . WHILE controlwhileexp DO block
    (39) stmt -> . FOR assignstmt TO controlforupexp DO block
    (40) stmt -> . FOR assignstmt DOWNTO controlfordownexp DO block
    (43) stmt -> . CASE controlcaseexp caseelement END
    (49) stmt -> . RETURN exp
    (50) stmt -> . exp
    (31) assignstmt -> . lvalue ASSIGN exp
    (51) exp -> . exp SUM exp
    (52) exp -> . exp SUB exp
    (53) exp -> . exp MUL exp
    (54) exp -> . exp DIV exp
    (55) exp -> . exp AND exp
    (56) exp -> . exp OR exp
    (57) exp -> . exp NE exp
    (58) exp -> . exp EQ exp
    (59) exp -> . exp LT exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GE exp
    (63) exp -> . OPEN_PAREN exp CLOSE_PAREN
    (64) exp -> . REALNUMBER
    (65) exp -> . INTEGER
    (66) exp -> . TRUE
    (67) exp -> . FALSE
    (68) exp -> . lvalue
    (69) exp -> . ID OPEN_PAREN explist CLOSE_PAREN
    (30) lvalue -> . ID

    BEGIN           shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    CASE            shift and go to state 25
    RETURN          shift and go to state 26
    OPEN_PAREN      shift and go to state 29
    REALNUMBER      shift and go to state 30
    INTEGER         shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 17

    block                          shift and go to state 147
    stmt                           shift and go to state 20
    assignstmt                     shift and go to state 21
    exp                            shift and go to state 27
    lvalue                         shift and go to state 28

state 146

    (46) caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON .

    END             reduce using rule 46 (caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON .)
    INTEGER         reduce using rule 46 (caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON .)


state 147

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block . SEMI_COLON

    SEMI_COLON      shift and go to state 148


state 148

    (20) funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .

    PROCEDURE       reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    FUNCTION        reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    INT             reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    REAL            reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    BOOL            reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    BEGIN           reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    IF              reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    WHILE           reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    FOR             reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    CASE            reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    RETURN          reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    OPEN_PAREN      reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    REALNUMBER      reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    INTEGER         reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    TRUE            reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    FALSE           reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)
    ID              reduce using rule 20 (funcdec -> FUNCTION ID OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON .)

