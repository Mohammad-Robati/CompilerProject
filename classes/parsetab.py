
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftORleftANDleftLTleftGTleftGEleftNEleftEQleftLEleftSUMSUBleftMULDIVAND ASSIGN BEGIN BOOL CASE CLOSE_PAREN COLON DIV DO DOWNTO ELSE END EQ FALSE FOR FUNCTION GE GT ID IF INT INTEGER LE LT MUL NE OPEN_PAREN OR PRINT PROCEDURE PROGRAM REAL REALNUMBER RETURN SEMI_COLON SEPARATOR SUB SUM THEN TO TRUE WHILEprogram : PROGRAM ID SEMI_COLON declistlast block SEMI_COLONdeclistlast : declistdeclistlast : declist : decdeclist : declist decdec : vardecdec : procdecdec : funcdectype : INTtype : REALtype : BOOLiddec : IDiddec : ID ASSIGN expidlist : iddecidlist : idlist SEPARATOR iddecvardec : type idlist SEMI_COLONparamdecslast : paramdecsparamdecslast : procdec : PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLONfuncname : FUNCTION ID funcdec : funcname OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLONparamdecs : paramdecparamdecs : paramdecs SEMI_COLON paramdecparamdec : type paramlistparamlist : IDparamlist : paramlist SEPARATOR IDblock : BEGIN stmtlist ENDblock : stmtstmtlist : stmtstmtlist : stmtlist SEMI_COLON stmtlvalue : IDassignstmt : lvalue ASSIGN expstmt : assignstmtstmt : IF controlifexp THEN blockstmt : IF controlifexp THEN block ELSE controlelse blockcontrolifexp : expcontrolelse : stmt : PRINT OPEN_PAREN ID CLOSE_PARENstmt : WHILE controlwhileexp DO blockcontrolwhileexp : expstmt : FOR assignstmt TO controlforupexp DO blockstmt : FOR assignstmt DOWNTO controlfordownexp DO blockcontrolforupexp : expcontrolfordownexp : expstmt : CASE controlcaseexp caseelement ENDcontrolcaseexp : exp caseelement : case COLON caseelementcontrol block SEMI_COLON caseelement : caseelement case COLON caseelementcontrol block SEMI_COLONcaseelementcontrol : case : INTEGERstmt : RETURN expstmt : expexp : exp SUM expexp : exp SUB expexp : exp MUL expexp : exp DIV expexp : exp AND expexp : exp OR expexp : exp NE expexp : exp EQ expexp : exp LT expexp : exp GT expexp : exp LE expexp : exp GE expexp : OPEN_PAREN exp CLOSE_PARENexp : REALNUMBERexp : INTEGERexp : TRUEexp : FALSEexp : lvalueexp : ID OPEN_PAREN explist CLOSE_PARENexplist : expexplist : explist SEPARATOR exp'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,44,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,12,14,15,16,17,20,23,25,26,27,28,29,36,43,50,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,84,85,88,89,90,115,126,127,129,132,133,134,135,136,137,138,140,143,146,150,153,],[3,-3,18,-2,-4,-6,-7,-8,39,40,-9,-10,-11,42,18,18,18,18,56,18,18,-5,18,86,18,18,18,18,18,18,18,18,18,18,18,18,18,-16,39,18,112,18,18,18,18,18,18,-49,-3,139,-37,18,18,-49,18,18,-3,18,18,18,-19,-21,]),'SEMI_COLON':([3,18,19,21,22,30,31,32,33,34,35,37,38,39,45,46,49,59,79,80,83,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,112,114,116,117,118,119,124,130,139,141,142,144,145,147,148,151,],[4,-31,44,-28,-33,-52,-70,-66,-67,-68,-69,73,-14,-12,84,-29,-70,-51,113,-22,-27,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-32,-15,-13,-24,-25,-71,-30,-34,-38,-39,-45,-23,-26,-41,-42,149,150,-35,152,153,]),'BEGIN':([4,5,6,7,8,9,10,14,15,16,36,73,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,20,-2,-4,-6,-7,-8,-9,-10,-11,-5,-16,20,20,-49,-3,-37,20,20,-49,20,20,-3,20,20,20,-19,-21,]),'IF':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,23,-2,-4,-6,-7,-8,-9,-10,-11,23,-5,-16,23,23,23,-49,-3,-37,23,23,-49,23,23,-3,23,23,23,-19,-21,]),'PRINT':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,24,-2,-4,-6,-7,-8,-9,-10,-11,24,-5,-16,24,24,24,-49,-3,-37,24,24,-49,24,24,-3,24,24,24,-19,-21,]),'WHILE':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,26,-2,-4,-6,-7,-8,-9,-10,-11,26,-5,-16,26,26,26,-49,-3,-37,26,26,-49,26,26,-3,26,26,26,-19,-21,]),'FOR':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,27,-2,-4,-6,-7,-8,-9,-10,-11,27,-5,-16,27,27,27,-49,-3,-37,27,27,-49,27,27,-3,27,27,27,-19,-21,]),'CASE':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,28,-2,-4,-6,-7,-8,-9,-10,-11,28,-5,-16,28,28,28,-49,-3,-37,28,28,-49,28,28,-3,28,28,28,-19,-21,]),'RETURN':([4,5,6,7,8,9,10,14,15,16,20,36,73,84,85,88,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,29,-2,-4,-6,-7,-8,-9,-10,-11,29,-5,-16,29,29,29,-49,-3,-37,29,29,-49,29,29,-3,29,29,29,-19,-21,]),'OPEN_PAREN':([4,5,6,7,8,9,10,13,14,15,16,18,20,23,24,25,26,28,29,36,40,42,43,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,84,85,88,89,90,115,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,25,-2,-4,-6,-7,-8,41,-9,-10,-11,43,25,25,50,25,25,25,25,-5,76,-20,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-16,25,25,25,25,25,25,25,-49,-3,-37,25,25,-49,25,25,-3,25,25,25,-19,-21,]),'REALNUMBER':([4,5,6,7,8,9,10,14,15,16,20,23,25,26,28,29,36,43,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,84,85,88,89,90,115,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,32,-2,-4,-6,-7,-8,-9,-10,-11,32,32,32,32,32,32,-5,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-16,32,32,32,32,32,32,32,-49,-3,-37,32,32,-49,32,32,-3,32,32,32,-19,-21,]),'INTEGER':([4,5,6,7,8,9,10,14,15,16,18,20,23,25,26,28,29,32,33,34,35,36,43,49,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,84,85,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,126,127,132,133,134,135,136,137,138,140,143,146,149,150,152,153,],[-3,33,-2,-4,-6,-7,-8,-9,-10,-11,-31,33,33,33,33,33,33,-66,-67,-68,-69,-5,33,-70,93,-46,33,33,33,33,33,33,33,33,33,33,33,33,33,-16,33,33,33,-65,33,33,33,93,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-71,33,-49,-3,-37,33,33,-49,33,33,-3,33,33,33,-47,-19,-48,-21,]),'TRUE':([4,5,6,7,8,9,10,14,15,16,20,23,25,26,28,29,36,43,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,84,85,88,89,90,115,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,34,-2,-4,-6,-7,-8,-9,-10,-11,34,34,34,34,34,34,-5,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-16,34,34,34,34,34,34,34,-49,-3,-37,34,34,-49,34,34,-3,34,34,34,-19,-21,]),'FALSE':([4,5,6,7,8,9,10,14,15,16,20,23,25,26,28,29,36,43,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,84,85,88,89,90,115,126,127,132,133,134,135,136,137,138,140,143,146,150,153,],[-3,35,-2,-4,-6,-7,-8,-9,-10,-11,35,35,35,35,35,35,-5,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-16,35,35,35,35,35,35,35,-49,-3,-37,35,35,-49,35,35,-3,35,35,35,-19,-21,]),'PROCEDURE':([4,6,7,8,9,10,14,15,16,36,73,127,138,150,153,],[12,12,-4,-6,-7,-8,-9,-10,-11,-5,-16,12,12,-19,-21,]),'INT':([4,6,7,8,9,10,14,15,16,36,41,73,76,113,127,128,138,150,153,],[14,14,-4,-6,-7,-8,-9,-10,-11,-5,14,-16,14,14,14,14,14,-19,-21,]),'REAL':([4,6,7,8,9,10,14,15,16,36,41,73,76,113,127,128,138,150,153,],[15,15,-4,-6,-7,-8,-9,-10,-11,-5,15,-16,15,15,15,15,15,-19,-21,]),'BOOL':([4,6,7,8,9,10,14,15,16,36,41,73,76,113,127,128,138,150,153,],[16,16,-4,-6,-7,-8,-9,-10,-11,-5,16,-16,16,16,16,16,16,-19,-21,]),'FUNCTION':([4,6,7,8,9,10,14,15,16,36,73,127,138,150,153,],[17,17,-4,-6,-7,-8,-9,-10,-11,-5,-16,17,17,-19,-21,]),'ASSIGN':([18,31,39,55,56,],[-31,72,75,72,-31,]),'SUM':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,60,-70,-66,-67,-68,-69,60,-70,60,60,60,60,60,-65,-53,-54,-55,-56,60,60,60,60,60,60,60,60,60,60,-71,60,60,60,]),'SUB':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,61,-70,-66,-67,-68,-69,61,-70,61,61,61,61,61,-65,-53,-54,-55,-56,61,61,61,61,61,61,61,61,61,61,-71,61,61,61,]),'MUL':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,62,-70,-66,-67,-68,-69,62,-70,62,62,62,62,62,-65,62,62,-55,-56,62,62,62,62,62,62,62,62,62,62,-71,62,62,62,]),'DIV':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,63,-70,-66,-67,-68,-69,63,-70,63,63,63,63,63,-65,63,63,-55,-56,63,63,63,63,63,63,63,63,63,63,-71,63,63,63,]),'AND':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,64,-70,-66,-67,-68,-69,64,-70,64,64,64,64,64,-65,-53,-54,-55,-56,-57,64,-59,-60,-61,-62,-63,-64,64,64,-71,64,64,64,]),'OR':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,65,-70,-66,-67,-68,-69,65,-70,65,65,65,65,65,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,65,65,-71,65,65,65,]),'NE':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,66,-70,-66,-67,-68,-69,66,-70,66,66,66,66,66,-65,-53,-54,-55,-56,66,66,-59,-60,66,66,-63,66,66,66,-71,66,66,66,]),'EQ':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,67,-70,-66,-67,-68,-69,67,-70,67,67,67,67,67,-65,-53,-54,-55,-56,67,67,67,-60,67,67,-63,67,67,67,-71,67,67,67,]),'LT':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,68,-70,-66,-67,-68,-69,68,-70,68,68,68,68,68,-65,-53,-54,-55,-56,68,68,-59,-60,-61,-62,-63,-64,68,68,-71,68,68,68,]),'GT':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,69,-70,-66,-67,-68,-69,69,-70,69,69,69,69,69,-65,-53,-54,-55,-56,69,69,-59,-60,69,-62,-63,-64,69,69,-71,69,69,69,]),'LE':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,70,-70,-66,-67,-68,-69,70,-70,70,70,70,70,70,-65,-53,-54,-55,-56,70,70,70,70,70,70,-63,70,70,70,-71,70,70,70,]),'GE':([18,30,31,32,33,34,35,48,49,51,53,58,59,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,121,123,131,],[-31,71,-70,-66,-67,-68,-69,71,-70,71,71,71,71,71,-65,-53,-54,-55,-56,71,71,-59,-60,71,71,-63,-64,71,71,-71,71,71,71,]),'END':([18,21,22,30,31,32,33,34,35,45,46,49,59,83,87,91,94,95,96,97,98,99,100,101,102,103,104,105,106,114,116,117,118,119,124,141,142,147,149,152,],[-31,-28,-33,-52,-70,-66,-67,-68,-69,83,-29,-70,-51,-27,-65,124,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-32,-71,-30,-34,-38,-39,-45,-41,-42,-35,-47,-48,]),'THEN':([18,32,33,34,35,47,48,49,87,94,95,96,97,98,99,100,101,102,103,104,105,114,],[-31,-66,-67,-68,-69,85,-36,-70,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-71,]),'CLOSE_PAREN':([18,32,33,34,35,41,49,51,76,77,79,80,81,82,86,87,94,95,96,97,98,99,100,101,102,103,104,105,109,111,112,114,130,131,139,],[-31,-66,-67,-68,-69,-18,-70,87,-18,110,-17,-22,114,-72,118,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,127,-24,-25,-71,-23,-73,-26,]),'DO':([18,32,33,34,35,49,52,53,87,94,95,96,97,98,99,100,101,102,103,104,105,114,120,121,122,123,],[-31,-66,-67,-68,-69,-70,88,-40,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-71,133,-43,134,-44,]),'ELSE':([18,21,22,30,31,32,33,34,35,49,59,83,87,94,95,96,97,98,99,100,101,102,103,104,105,106,114,117,118,119,124,141,142,147,],[-31,-28,-33,-52,-70,-66,-67,-68,-69,-70,-51,-27,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-32,-71,132,-38,-39,-45,-41,-42,-35,]),'SEPARATOR':([18,32,33,34,35,37,38,39,49,81,82,87,94,95,96,97,98,99,100,101,102,103,104,105,107,108,111,112,114,131,139,],[-31,-66,-67,-68,-69,74,-14,-12,-70,115,-72,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-15,-13,129,-25,-71,-73,-26,]),'TO':([18,32,33,34,35,49,54,87,94,95,96,97,98,99,100,101,102,103,104,105,106,114,],[-31,-66,-67,-68,-69,-70,89,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-32,-71,]),'DOWNTO':([18,32,33,34,35,49,54,87,94,95,96,97,98,99,100,101,102,103,104,105,106,114,],[-31,-66,-67,-68,-69,-70,90,-65,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-32,-71,]),'COLON':([92,93,110,125,],[126,-50,128,135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declistlast':([4,127,138,],[5,137,146,]),'declist':([4,127,138,],[6,6,6,]),'dec':([4,6,127,138,],[7,36,7,7,]),'vardec':([4,6,127,138,],[8,8,8,8,]),'procdec':([4,6,127,138,],[9,9,9,9,]),'funcdec':([4,6,127,138,],[10,10,10,10,]),'type':([4,6,41,76,113,127,128,138,],[11,11,78,78,78,11,138,11,]),'funcname':([4,6,127,138,],[13,13,13,13,]),'block':([5,85,88,133,134,136,137,140,143,146,],[19,117,119,141,142,144,145,147,148,151,]),'stmt':([5,20,84,85,88,133,134,136,137,140,143,146,],[21,46,116,21,21,21,21,21,21,21,21,21,]),'assignstmt':([5,20,27,84,85,88,133,134,136,137,140,143,146,],[22,22,54,22,22,22,22,22,22,22,22,22,22,]),'exp':([5,20,23,25,26,28,29,43,60,61,62,63,64,65,66,67,68,69,70,71,72,75,84,85,88,89,90,115,133,134,136,137,140,143,146,],[30,30,48,51,53,58,59,82,94,95,96,97,98,99,100,101,102,103,104,105,106,108,30,30,30,121,123,131,30,30,30,30,30,30,30,]),'lvalue':([5,20,23,25,26,27,28,29,43,60,61,62,63,64,65,66,67,68,69,70,71,72,75,84,85,88,89,90,115,133,134,136,137,140,143,146,],[31,31,49,49,49,55,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,31,31,31,49,49,49,31,31,31,31,31,31,31,]),'idlist':([11,],[37,]),'iddec':([11,74,],[38,107,]),'stmtlist':([20,],[45,]),'controlifexp':([23,],[47,]),'controlwhileexp':([26,],[52,]),'controlcaseexp':([28,],[57,]),'paramdecslast':([41,76,],[77,109,]),'paramdecs':([41,76,],[79,79,]),'paramdec':([41,76,113,],[80,80,130,]),'explist':([43,],[81,]),'caseelement':([57,],[91,]),'case':([57,91,],[92,125,]),'paramlist':([78,],[111,]),'controlforupexp':([89,],[120,]),'controlfordownexp':([90,],[122,]),'caseelementcontrol':([126,135,],[136,143,]),'controlelse':([132,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI_COLON declistlast block SEMI_COLON','program',6,'p_prog_declist','parser.py',40),
  ('declistlast -> declist','declistlast',1,'p_declist_last','parser.py',68),
  ('declistlast -> <empty>','declistlast',0,'p_declist_empty','parser.py',73),
  ('declist -> dec','declist',1,'p_declist','parser.py',78),
  ('declist -> declist dec','declist',2,'p_declist_ext','parser.py',84),
  ('dec -> vardec','dec',1,'p_dec_vardec','parser.py',90),
  ('dec -> procdec','dec',1,'p_dec_procdec','parser.py',96),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','parser.py',101),
  ('type -> INT','type',1,'p_type_int','parser.py',106),
  ('type -> REAL','type',1,'p_type_real','parser.py',110),
  ('type -> BOOL','type',1,'p_type_bool','parser.py',114),
  ('iddec -> ID','iddec',1,'p_iddec_id','parser.py',118),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_exp','parser.py',126),
  ('idlist -> iddec','idlist',1,'p_idlist_iddec','parser.py',138),
  ('idlist -> idlist SEPARATOR iddec','idlist',3,'p_idlist_ext','parser.py',144),
  ('vardec -> type idlist SEMI_COLON','vardec',3,'p_vardec','parser.py',150),
  ('paramdecslast -> paramdecs','paramdecslast',1,'p_paramdecs_last','parser.py',156),
  ('paramdecslast -> <empty>','paramdecslast',0,'p_paramdecs_empty','parser.py',162),
  ('procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON','procdec',8,'p_procdec_declist','parser.py',167),
  ('funcname -> FUNCTION ID','funcname',2,'p_intro_funcdec','parser.py',180),
  ('funcdec -> funcname OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON','funcdec',9,'p_funcdec_declist','parser.py',184),
  ('paramdecs -> paramdec','paramdecs',1,'p_paramdecs','parser.py',197),
  ('paramdecs -> paramdecs SEMI_COLON paramdec','paramdecs',3,'p_paramdecs_ext','parser.py',203),
  ('paramdec -> type paramlist','paramdec',2,'p_paramdec','parser.py',208),
  ('paramlist -> ID','paramlist',1,'p_paramlist','parser.py',213),
  ('paramlist -> paramlist SEPARATOR ID','paramlist',3,'p_paramlist_ext','parser.py',218),
  ('block -> BEGIN stmtlist END','block',3,'p_block_stmtlist','parser.py',224),
  ('block -> stmt','block',1,'p_block_stmt','parser.py',229),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist','parser.py',234),
  ('stmtlist -> stmtlist SEMI_COLON stmt','stmtlist',3,'p_stmtlist_ext','parser.py',239),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',244),
  ('assignstmt -> lvalue ASSIGN exp','assignstmt',3,'p_stmt_assign','parser.py',251),
  ('stmt -> assignstmt','stmt',1,'p_assign_stmt_assign','parser.py',260),
  ('stmt -> IF controlifexp THEN block','stmt',4,'p_stmt_if','parser.py',265),
  ('stmt -> IF controlifexp THEN block ELSE controlelse block','stmt',7,'p_stmt_if_else','parser.py',270),
  ('controlifexp -> exp','controlifexp',1,'p_control_if_exp','parser.py',275),
  ('controlelse -> <empty>','controlelse',0,'p_controlelse','parser.py',282),
  ('stmt -> PRINT OPEN_PAREN ID CLOSE_PAREN','stmt',4,'p_print','parser.py',290),
  ('stmt -> WHILE controlwhileexp DO block','stmt',4,'p_stmt_while','parser.py',294),
  ('controlwhileexp -> exp','controlwhileexp',1,'p_control_while_exp','parser.py',301),
  ('stmt -> FOR assignstmt TO controlforupexp DO block','stmt',6,'p_stmt_for_up','parser.py',308),
  ('stmt -> FOR assignstmt DOWNTO controlfordownexp DO block','stmt',6,'p_stmt_for_down','parser.py',320),
  ('controlforupexp -> exp','controlforupexp',1,'p_control_for_up_exp','parser.py',332),
  ('controlfordownexp -> exp','controlfordownexp',1,'p_control_for_down_exp','parser.py',338),
  ('stmt -> CASE controlcaseexp caseelement END','stmt',4,'p_stmt_case','parser.py',344),
  ('controlcaseexp -> exp','controlcaseexp',1,'p_control_case_exp','parser.py',351),
  ('caseelement -> case COLON caseelementcontrol block SEMI_COLON','caseelement',5,'p_caseelement','parser.py',364),
  ('caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON','caseelement',6,'p_caseelement_ext','parser.py',371),
  ('caseelementcontrol -> <empty>','caseelementcontrol',0,'p_case_element_control','parser.py',379),
  ('case -> INTEGER','case',1,'p_case_integer','parser.py',387),
  ('stmt -> RETURN exp','stmt',2,'p_stmt_return','parser.py',392),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',397),
  ('exp -> exp SUM exp','exp',3,'p_exp_sum','parser.py',402),
  ('exp -> exp SUB exp','exp',3,'p_exp_sub','parser.py',408),
  ('exp -> exp MUL exp','exp',3,'p_exp_mul','parser.py',414),
  ('exp -> exp DIV exp','exp',3,'p_exp_div','parser.py',420),
  ('exp -> exp AND exp','exp',3,'p_exp_and','parser.py',426),
  ('exp -> exp OR exp','exp',3,'p_exp_or','parser.py',437),
  ('exp -> exp NE exp','exp',3,'p_exp_ne','parser.py',448),
  ('exp -> exp EQ exp','exp',3,'p_exp_eq','parser.py',454),
  ('exp -> exp LT exp','exp',3,'p_exp_lt','parser.py',460),
  ('exp -> exp GT exp','exp',3,'p_exp_gt','parser.py',466),
  ('exp -> exp LE exp','exp',3,'p_exp_le','parser.py',472),
  ('exp -> exp GE exp','exp',3,'p_exp_ge','parser.py',478),
  ('exp -> OPEN_PAREN exp CLOSE_PAREN','exp',3,'p_exp_paren','parser.py',484),
  ('exp -> REALNUMBER','exp',1,'p_exp_real','parser.py',490),
  ('exp -> INTEGER','exp',1,'p_exp_integer','parser.py',495),
  ('exp -> TRUE','exp',1,'p_exp_true','parser.py',499),
  ('exp -> FALSE','exp',1,'p_exp_false','parser.py',505),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser.py',511),
  ('exp -> ID OPEN_PAREN explist CLOSE_PAREN','exp',4,'p_exp_func','parser.py',516),
  ('explist -> exp','explist',1,'p_explist','parser.py',526),
  ('explist -> explist SEPARATOR exp','explist',3,'p_explist_ext','parser.py',532),
]
