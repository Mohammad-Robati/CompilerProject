
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftORleftANDleftLTleftGTleftGEleftNEleftEQleftLEleftSUMSUBleftMULDIVAND ASSIGN BEGIN BOOL CASE CLOSE_PAREN COLON DIV DO DOWNTO ELSE END EQ FALSE FOR FUNCTION GE GT ID IF INT INTEGER LE LT MUL NE OPEN_PAREN OR PROCEDURE PROGRAM REAL REALNUMBER RETURN SEMI_COLON SEPARATOR SUB SUM THEN TO TRUE WHILEprogram : PROGRAM ID SEMI_COLON declistlast block SEMI_COLONdeclistlast : declistdeclistlast : declist : decdeclist : declist decdec : vardecdec : procdecdec : funcdectype : INTtype : REALtype : BOOLiddec : IDiddec : ID ASSIGN expidlist : iddecidlist : idlist SEPARATOR iddecvardec : type idlist SEMI_COLONparamdecslast : paramdecsparamdecslast : procdec : PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLONfuncname : FUNCTION ID funcdec : funcname OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLONparamdecs : paramdecparamdecs : paramdecs SEMI_COLON paramdecparamdec : type paramlistparamlist : IDparamlist : paramlist SEPARATOR IDblock : BEGIN stmtlist ENDblock : stmtstmtlist : stmtstmtlist : stmtlist SEMI_COLON stmtlvalue : IDassignstmt : lvalue ASSIGN expstmt : assignstmtstmt : IF controlifexp THEN blockstmt : IF controlifexp THEN block ELSE controlelse blockcontrolifexp : expcontrolelse : stmt : WHILE controlwhileexp DO blockcontrolwhileexp : expstmt : FOR assignstmt TO controlforupexp DO blockstmt : FOR assignstmt DOWNTO controlfordownexp DO blockcontrolforupexp : expcontrolfordownexp : expstmt : CASE controlcaseexp caseelement ENDcontrolcaseexp : exp caseelement : case COLON caseelementcontrol block SEMI_COLON caseelement : caseelement case COLON caseelementcontrol block SEMI_COLONcaseelementcontrol : case : INTEGERstmt : RETURN expstmt : expexp : exp SUM expexp : exp SUB expexp : exp MUL expexp : exp DIV expexp : exp AND expexp : exp OR expexp : exp NE expexp : exp EQ expexp : exp LT expexp : exp GT expexp : exp LE expexp : exp GE expexp : OPEN_PAREN exp CLOSE_PARENexp : REALNUMBERexp : INTEGERexp : TRUEexp : FALSEexp : lvalueexp : ID OPEN_PAREN explist CLOSE_PARENexplist : expexplist : explist SEPARATOR exp'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,43,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,12,14,15,16,17,20,23,24,25,26,27,30,35,42,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,76,82,83,84,85,86,112,122,123,125,128,129,130,131,132,133,134,136,139,142,146,149,],[3,-3,18,-2,-4,-6,-7,-8,38,39,-9,-10,-11,41,18,18,18,53,18,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-16,38,18,109,18,18,18,18,18,18,-48,-3,135,-37,18,18,-48,18,18,-3,18,18,18,-19,-21,]),'SEMI_COLON':([3,18,19,21,22,28,29,31,32,33,34,36,37,38,44,45,48,56,77,78,81,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,109,111,113,114,115,120,126,135,137,138,140,141,143,144,147,],[4,-31,43,-28,-33,-51,-69,-65,-66,-67,-68,71,-14,-12,82,-29,-69,-50,110,-22,-27,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-32,-64,-15,-13,-24,-25,-70,-30,-34,-38,-44,-23,-26,-40,-41,145,146,-35,148,149,]),'BEGIN':([4,5,6,7,8,9,10,14,15,16,35,71,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,20,-2,-4,-6,-7,-8,-9,-10,-11,-5,-16,20,20,-48,-3,-37,20,20,-48,20,20,-3,20,20,20,-19,-21,]),'IF':([4,5,6,7,8,9,10,14,15,16,20,35,71,82,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,23,-2,-4,-6,-7,-8,-9,-10,-11,23,-5,-16,23,23,23,-48,-3,-37,23,23,-48,23,23,-3,23,23,23,-19,-21,]),'WHILE':([4,5,6,7,8,9,10,14,15,16,20,35,71,82,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,24,-2,-4,-6,-7,-8,-9,-10,-11,24,-5,-16,24,24,24,-48,-3,-37,24,24,-48,24,24,-3,24,24,24,-19,-21,]),'FOR':([4,5,6,7,8,9,10,14,15,16,20,35,71,82,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,25,-2,-4,-6,-7,-8,-9,-10,-11,25,-5,-16,25,25,25,-48,-3,-37,25,25,-48,25,25,-3,25,25,25,-19,-21,]),'CASE':([4,5,6,7,8,9,10,14,15,16,20,35,71,82,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,26,-2,-4,-6,-7,-8,-9,-10,-11,26,-5,-16,26,26,26,-48,-3,-37,26,26,-48,26,26,-3,26,26,26,-19,-21,]),'RETURN':([4,5,6,7,8,9,10,14,15,16,20,35,71,82,83,84,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,27,-2,-4,-6,-7,-8,-9,-10,-11,27,-5,-16,27,27,27,-48,-3,-37,27,27,-48,27,27,-3,27,27,27,-19,-21,]),'OPEN_PAREN':([4,5,6,7,8,9,10,13,14,15,16,18,20,23,24,26,27,30,35,39,41,42,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,82,83,84,85,86,112,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,30,-2,-4,-6,-7,-8,40,-9,-10,-11,42,30,30,30,30,30,30,-5,74,-20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-16,30,30,30,30,30,30,30,-48,-3,-37,30,30,-48,30,30,-3,30,30,30,-19,-21,]),'REALNUMBER':([4,5,6,7,8,9,10,14,15,16,20,23,24,26,27,30,35,42,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,82,83,84,85,86,112,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,31,-2,-4,-6,-7,-8,-9,-10,-11,31,31,31,31,31,31,-5,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-16,31,31,31,31,31,31,31,-48,-3,-37,31,31,-48,31,31,-3,31,31,31,-19,-21,]),'INTEGER':([4,5,6,7,8,9,10,14,15,16,18,20,23,24,26,27,30,31,32,33,34,35,42,48,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,82,83,84,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,103,111,112,122,123,128,129,130,131,132,133,134,136,139,142,145,146,148,149,],[-3,32,-2,-4,-6,-7,-8,-9,-10,-11,-31,32,32,32,32,32,32,-65,-66,-67,-68,-5,32,-69,89,-45,32,32,32,32,32,32,32,32,32,32,32,32,32,-16,32,32,32,32,32,32,89,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-70,32,-48,-3,-37,32,32,-48,32,32,-3,32,32,32,-46,-19,-47,-21,]),'TRUE':([4,5,6,7,8,9,10,14,15,16,20,23,24,26,27,30,35,42,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,82,83,84,85,86,112,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,33,-2,-4,-6,-7,-8,-9,-10,-11,33,33,33,33,33,33,-5,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-16,33,33,33,33,33,33,33,-48,-3,-37,33,33,-48,33,33,-3,33,33,33,-19,-21,]),'FALSE':([4,5,6,7,8,9,10,14,15,16,20,23,24,26,27,30,35,42,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,82,83,84,85,86,112,122,123,128,129,130,131,132,133,134,136,139,142,146,149,],[-3,34,-2,-4,-6,-7,-8,-9,-10,-11,34,34,34,34,34,34,-5,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-16,34,34,34,34,34,34,34,-48,-3,-37,34,34,-48,34,34,-3,34,34,34,-19,-21,]),'PROCEDURE':([4,6,7,8,9,10,14,15,16,35,71,123,134,146,149,],[12,12,-4,-6,-7,-8,-9,-10,-11,-5,-16,12,12,-19,-21,]),'INT':([4,6,7,8,9,10,14,15,16,35,40,71,74,110,123,124,134,146,149,],[14,14,-4,-6,-7,-8,-9,-10,-11,-5,14,-16,14,14,14,14,14,-19,-21,]),'REAL':([4,6,7,8,9,10,14,15,16,35,40,71,74,110,123,124,134,146,149,],[15,15,-4,-6,-7,-8,-9,-10,-11,-5,15,-16,15,15,15,15,15,-19,-21,]),'BOOL':([4,6,7,8,9,10,14,15,16,35,40,71,74,110,123,124,134,146,149,],[16,16,-4,-6,-7,-8,-9,-10,-11,-5,16,-16,16,16,16,16,16,-19,-21,]),'FUNCTION':([4,6,7,8,9,10,14,15,16,35,71,123,134,146,149,],[17,17,-4,-6,-7,-8,-9,-10,-11,-5,-16,17,17,-19,-21,]),'ASSIGN':([18,29,38,52,53,],[-31,69,73,69,-31,]),'SUM':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,57,-69,-65,-66,-67,-68,57,-69,57,57,57,57,57,-52,-53,-54,-55,57,57,57,57,57,57,57,57,57,-64,57,-70,57,57,57,]),'SUB':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,58,-69,-65,-66,-67,-68,58,-69,58,58,58,58,58,-52,-53,-54,-55,58,58,58,58,58,58,58,58,58,-64,58,-70,58,58,58,]),'MUL':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,59,-69,-65,-66,-67,-68,59,-69,59,59,59,59,59,59,59,-54,-55,59,59,59,59,59,59,59,59,59,-64,59,-70,59,59,59,]),'DIV':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,60,-69,-65,-66,-67,-68,60,-69,60,60,60,60,60,60,60,-54,-55,60,60,60,60,60,60,60,60,60,-64,60,-70,60,60,60,]),'AND':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,61,-69,-65,-66,-67,-68,61,-69,61,61,61,61,61,-52,-53,-54,-55,-56,61,-58,-59,-60,-61,-62,-63,61,-64,61,-70,61,61,61,]),'OR':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,62,-69,-65,-66,-67,-68,62,-69,62,62,62,62,62,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,62,-64,62,-70,62,62,62,]),'NE':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,63,-69,-65,-66,-67,-68,63,-69,63,63,63,63,63,-52,-53,-54,-55,63,63,-58,-59,63,63,-62,63,63,-64,63,-70,63,63,63,]),'EQ':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,64,-69,-65,-66,-67,-68,64,-69,64,64,64,64,64,-52,-53,-54,-55,64,64,64,-59,64,64,-62,64,64,-64,64,-70,64,64,64,]),'LT':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,65,-69,-65,-66,-67,-68,65,-69,65,65,65,65,65,-52,-53,-54,-55,65,65,-58,-59,-60,-61,-62,-63,65,-64,65,-70,65,65,65,]),'GT':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,66,-69,-65,-66,-67,-68,66,-69,66,66,66,66,66,-52,-53,-54,-55,66,66,-58,-59,66,-61,-62,-63,66,-64,66,-70,66,66,66,]),'LE':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,67,-69,-65,-66,-67,-68,67,-69,67,67,67,67,67,-52,-53,-54,-55,67,67,67,67,67,67,-62,67,67,-64,67,-70,67,67,67,]),'GE':([18,28,29,31,32,33,34,47,48,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,111,117,119,127,],[-31,68,-69,-65,-66,-67,-68,68,-69,68,68,68,68,68,-52,-53,-54,-55,68,68,-58,-59,68,68,-62,-63,68,-64,68,-70,68,68,68,]),'END':([18,21,22,28,29,31,32,33,34,44,45,48,56,81,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,113,114,115,120,137,138,143,145,148,],[-31,-28,-33,-51,-69,-65,-66,-67,-68,81,-29,-69,-50,-27,120,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-32,-64,-70,-30,-34,-38,-44,-40,-41,-35,-46,-47,]),'THEN':([18,31,32,33,34,46,47,48,90,91,92,93,94,95,96,97,98,99,100,101,103,111,],[-31,-65,-66,-67,-68,83,-36,-69,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-70,]),'DO':([18,31,32,33,34,48,49,50,90,91,92,93,94,95,96,97,98,99,100,101,103,111,116,117,118,119,],[-31,-65,-66,-67,-68,-69,84,-39,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-70,129,-42,130,-43,]),'ELSE':([18,21,22,28,29,31,32,33,34,48,56,81,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,115,120,137,138,143,],[-31,-28,-33,-51,-69,-65,-66,-67,-68,-69,-50,-27,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-32,-64,-70,128,-38,-44,-40,-41,-35,]),'CLOSE_PAREN':([18,31,32,33,34,40,48,70,74,75,77,78,79,80,90,91,92,93,94,95,96,97,98,99,100,101,103,106,108,109,111,126,127,135,],[-31,-65,-66,-67,-68,-18,-69,103,-18,107,-17,-22,111,-71,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,123,-24,-25,-70,-23,-72,-26,]),'SEPARATOR':([18,31,32,33,34,36,37,38,48,79,80,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,108,109,111,127,135,],[-31,-65,-66,-67,-68,72,-14,-12,-69,112,-71,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-15,-13,125,-25,-70,-72,-26,]),'TO':([18,31,32,33,34,48,51,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,],[-31,-65,-66,-67,-68,-69,85,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-32,-64,-70,]),'DOWNTO':([18,31,32,33,34,48,51,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,],[-31,-65,-66,-67,-68,-69,86,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-32,-64,-70,]),'COLON':([88,89,107,121,],[122,-49,124,131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declistlast':([4,123,134,],[5,133,142,]),'declist':([4,123,134,],[6,6,6,]),'dec':([4,6,123,134,],[7,35,7,7,]),'vardec':([4,6,123,134,],[8,8,8,8,]),'procdec':([4,6,123,134,],[9,9,9,9,]),'funcdec':([4,6,123,134,],[10,10,10,10,]),'type':([4,6,40,74,110,123,124,134,],[11,11,76,76,76,11,134,11,]),'funcname':([4,6,123,134,],[13,13,13,13,]),'block':([5,83,84,129,130,132,133,136,139,142,],[19,114,115,137,138,140,141,143,144,147,]),'stmt':([5,20,82,83,84,129,130,132,133,136,139,142,],[21,45,113,21,21,21,21,21,21,21,21,21,]),'assignstmt':([5,20,25,82,83,84,129,130,132,133,136,139,142,],[22,22,51,22,22,22,22,22,22,22,22,22,22,]),'exp':([5,20,23,24,26,27,30,42,57,58,59,60,61,62,63,64,65,66,67,68,69,73,82,83,84,85,86,112,129,130,132,133,136,139,142,],[28,28,47,50,55,56,70,80,90,91,92,93,94,95,96,97,98,99,100,101,102,105,28,28,28,117,119,127,28,28,28,28,28,28,28,]),'lvalue':([5,20,23,24,25,26,27,30,42,57,58,59,60,61,62,63,64,65,66,67,68,69,73,82,83,84,85,86,112,129,130,132,133,136,139,142,],[29,29,48,48,52,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,29,29,29,48,48,48,29,29,29,29,29,29,29,]),'idlist':([11,],[36,]),'iddec':([11,72,],[37,104,]),'stmtlist':([20,],[44,]),'controlifexp':([23,],[46,]),'controlwhileexp':([24,],[49,]),'controlcaseexp':([26,],[54,]),'paramdecslast':([40,74,],[75,106,]),'paramdecs':([40,74,],[77,77,]),'paramdec':([40,74,110,],[78,78,126,]),'explist':([42,],[79,]),'caseelement':([54,],[87,]),'case':([54,87,],[88,121,]),'paramlist':([76,],[108,]),'controlforupexp':([85,],[116,]),'controlfordownexp':([86,],[118,]),'caseelementcontrol':([122,131,],[132,139,]),'controlelse':([128,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI_COLON declistlast block SEMI_COLON','program',6,'p_prog_declist','parser.py',39),
  ('declistlast -> declist','declistlast',1,'p_declist_last','parser.py',44),
  ('declistlast -> <empty>','declistlast',0,'p_declist_empty','parser.py',49),
  ('declist -> dec','declist',1,'p_declist','parser.py',54),
  ('declist -> declist dec','declist',2,'p_declist_ext','parser.py',60),
  ('dec -> vardec','dec',1,'p_dec_vardec','parser.py',66),
  ('dec -> procdec','dec',1,'p_dec_procdec','parser.py',72),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','parser.py',77),
  ('type -> INT','type',1,'p_type_int','parser.py',82),
  ('type -> REAL','type',1,'p_type_real','parser.py',86),
  ('type -> BOOL','type',1,'p_type_bool','parser.py',90),
  ('iddec -> ID','iddec',1,'p_iddec_id','parser.py',94),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_exp','parser.py',102),
  ('idlist -> iddec','idlist',1,'p_idlist_iddec','parser.py',114),
  ('idlist -> idlist SEPARATOR iddec','idlist',3,'p_idlist_ext','parser.py',120),
  ('vardec -> type idlist SEMI_COLON','vardec',3,'p_vardec','parser.py',126),
  ('paramdecslast -> paramdecs','paramdecslast',1,'p_paramdecs_last','parser.py',132),
  ('paramdecslast -> <empty>','paramdecslast',0,'p_paramdecs_empty','parser.py',138),
  ('procdec -> PROCEDURE ID OPEN_PAREN paramdecslast CLOSE_PAREN declistlast block SEMI_COLON','procdec',8,'p_procdec_declist','parser.py',143),
  ('funcname -> FUNCTION ID','funcname',2,'p_intro_funcdec','parser.py',147),
  ('funcdec -> funcname OPEN_PAREN paramdecslast CLOSE_PAREN COLON type declistlast block SEMI_COLON','funcdec',9,'p_funcdec_declist','parser.py',150),
  ('paramdecs -> paramdec','paramdecs',1,'p_paramdecs','parser.py',157),
  ('paramdecs -> paramdecs SEMI_COLON paramdec','paramdecs',3,'p_paramdecs_ext','parser.py',163),
  ('paramdec -> type paramlist','paramdec',2,'p_paramdec','parser.py',168),
  ('paramlist -> ID','paramlist',1,'p_paramlist','parser.py',173),
  ('paramlist -> paramlist SEPARATOR ID','paramlist',3,'p_paramlist_ext','parser.py',178),
  ('block -> BEGIN stmtlist END','block',3,'p_block_stmtlist','parser.py',184),
  ('block -> stmt','block',1,'p_block_stmt','parser.py',188),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist','parser.py',192),
  ('stmtlist -> stmtlist SEMI_COLON stmt','stmtlist',3,'p_stmtlist_ext','parser.py',196),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',200),
  ('assignstmt -> lvalue ASSIGN exp','assignstmt',3,'p_stmt_assign','parser.py',207),
  ('stmt -> assignstmt','stmt',1,'p_assign_stmt_assign','parser.py',216),
  ('stmt -> IF controlifexp THEN block','stmt',4,'p_stmt_if','parser.py',220),
  ('stmt -> IF controlifexp THEN block ELSE controlelse block','stmt',7,'p_stmt_if_else','parser.py',225),
  ('controlifexp -> exp','controlifexp',1,'p_control_if_exp','parser.py',229),
  ('controlelse -> <empty>','controlelse',0,'p_controlelse','parser.py',236),
  ('stmt -> WHILE controlwhileexp DO block','stmt',4,'p_stmt_while','parser.py',240),
  ('controlwhileexp -> exp','controlwhileexp',1,'p_control_while_exp','parser.py',246),
  ('stmt -> FOR assignstmt TO controlforupexp DO block','stmt',6,'p_stmt_for_up','parser.py',253),
  ('stmt -> FOR assignstmt DOWNTO controlfordownexp DO block','stmt',6,'p_stmt_for_down','parser.py',264),
  ('controlforupexp -> exp','controlforupexp',1,'p_control_for_up_exp','parser.py',275),
  ('controlfordownexp -> exp','controlfordownexp',1,'p_control_for_down_exp','parser.py',281),
  ('stmt -> CASE controlcaseexp caseelement END','stmt',4,'p_stmt_case','parser.py',287),
  ('controlcaseexp -> exp','controlcaseexp',1,'p_control_case_exp','parser.py',293),
  ('caseelement -> case COLON caseelementcontrol block SEMI_COLON','caseelement',5,'p_caseelement','parser.py',305),
  ('caseelement -> caseelement case COLON caseelementcontrol block SEMI_COLON','caseelement',6,'p_caseelement_ext','parser.py',311),
  ('caseelementcontrol -> <empty>','caseelementcontrol',0,'p_case_element_control','parser.py',318),
  ('case -> INTEGER','case',1,'p_case_integer','parser.py',326),
  ('stmt -> RETURN exp','stmt',2,'p_stmt_return','parser.py',331),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',336),
  ('exp -> exp SUM exp','exp',3,'p_exp_sum','parser.py',340),
  ('exp -> exp SUB exp','exp',3,'p_exp_sub','parser.py',346),
  ('exp -> exp MUL exp','exp',3,'p_exp_mul','parser.py',352),
  ('exp -> exp DIV exp','exp',3,'p_exp_div','parser.py',358),
  ('exp -> exp AND exp','exp',3,'p_exp_and','parser.py',364),
  ('exp -> exp OR exp','exp',3,'p_exp_or','parser.py',375),
  ('exp -> exp NE exp','exp',3,'p_exp_ne','parser.py',386),
  ('exp -> exp EQ exp','exp',3,'p_exp_eq','parser.py',392),
  ('exp -> exp LT exp','exp',3,'p_exp_lt','parser.py',398),
  ('exp -> exp GT exp','exp',3,'p_exp_gt','parser.py',404),
  ('exp -> exp LE exp','exp',3,'p_exp_le','parser.py',410),
  ('exp -> exp GE exp','exp',3,'p_exp_ge','parser.py',416),
  ('exp -> OPEN_PAREN exp CLOSE_PAREN','exp',3,'p_exp_paren','parser.py',422),
  ('exp -> REALNUMBER','exp',1,'p_exp_real','parser.py',428),
  ('exp -> INTEGER','exp',1,'p_exp_integer','parser.py',433),
  ('exp -> TRUE','exp',1,'p_exp_true','parser.py',437),
  ('exp -> FALSE','exp',1,'p_exp_false','parser.py',443),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser.py',449),
  ('exp -> ID OPEN_PAREN explist CLOSE_PAREN','exp',4,'p_exp_func','parser.py',454),
  ('explist -> exp','explist',1,'p_explist','parser.py',463),
  ('explist -> explist SEPARATOR exp','explist',3,'p_explist_ext','parser.py',469),
]
